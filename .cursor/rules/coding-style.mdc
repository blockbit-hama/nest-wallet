 # 코딩 스타일 및 컨벤션 규칙

 ## 네이밍 컨벤션

 ### 변수 및 함수
 - **camelCase** 사용
 - 의미있는 이름 사용
 - 약어 사용 금지
 - 불린 변수는 `is`, `has`, `can` 등으로 시작

 ### 클래스 및 인터페이스
 - **PascalCase** 사용
 - 명사로 시작
 - 인터페이스는 `I` 접두사 사용하지 않음

 ### 상수
 - **UPPER_SNAKE_CASE** 사용
 - 의미있는 이름 사용

 ### 파일명
 - **kebab-case** 사용
 - 컴포넌트 파일은 PascalCase 사용

 ## 코드 구조

 ### 함수 작성
 - 단일 책임 원칙 준수
 - 함수 길이는 20줄 이하 권장
 - 매개변수는 3개 이하 권장
 - 명확한 반환 타입 지정

 ### 클래스 작성
 - 단일 책임 원칙 준수
 - 의존성 주입 활용
 - 인터페이스 우선 설계

 ### 주석 작성
 - 한글로 작성
 - 복잡한 로직에만 주석 추가
 - JSDoc 스타일 사용

 ## TypeScript 규칙

 ### 타입 정의
 - 명시적 타입 지정
 - `any` 타입 사용 금지
 - 유니온 타입 적극 활용
 - 제네릭 활용

 ### 인터페이스 vs 타입
 - 객체 형태는 인터페이스 사용
 - 유니온, 튜플은 타입 사용
 - 확장 가능성 고려

 ### 에러 처리
 - try-catch 블록 사용
 - 커스텀 에러 클래스 활용
 - 에러 메시지 명확히 작성

 ## NestJS 규칙

 ### 컨트롤러 작성
 - 단일 리소스당 하나의 컨트롤러
 - HTTP 메서드 데코레이터 사용
 - DTO를 통한 입력값 검증
 - 일관된 응답 형식

 ### 서비스 작성
 - 비즈니스 로직 구현
 - 의존성 주입 활용
 - 에러 처리 및 로깅
 - 단위 테스트 작성

 ### 모듈 작성
 - 기능별로 모듈 분리
 - 공통 모듈은 SharedModule로 분리
 - 순환 의존성 방지

 ## 데이터베이스 규칙

 ### 테이블명
 - **snake_case** 사용
 - 복수형 사용
 - 의미있는 이름 사용

 ### 컬럼명
 - **snake_case** 사용
 - 외래키는 `테이블명_id` 형식
 - 불린 컬럼은 `is_` 접두사

 ### 인덱스
 - 자주 조회되는 컬럼에 인덱스
 - 복합 인덱스 활용
 - 인덱스 이름 규칙 준수

 ## API 설계

 ### URL 구조
 - RESTful API 설계
 - 리소스 중심의 URL
 - 버전 관리 고려

 ### 응답 형식
 - 일관된 JSON 구조
 - 에러 응답 표준화
 - 페이지네이션 지원

 ### HTTP 메서드
 - GET: 조회
 - POST: 생성
 - PUT: 전체 수정
 - PATCH: 부분 수정
 - DELETE: 삭제

 ## 테스트 규칙

 ### E2E 테스트
 - 사용자 시나리오 테스트
 - 실제 환경과 유사한 조건
 - 성능 테스트 포함

 ## 성능 최적화

 ### 코드 최적화
 - 불필요한 계산 방지
 - 메모이제이션 활용
 - 지연 로딩 적용

 ### 데이터베이스 최적화
 - 쿼리 최적화
 - 인덱스 활용
 - 연결 풀 관리

 ### 번들 최적화
 - 코드 스플리팅
 - 트리 쉐이킹
 - 압축 및 최소화

 ## 보안 규칙

 ### 입력값 검증
 - 모든 입력값 검증
 - SQL Injection 방지
 - XSS 방지

 ### 데이터 보호
 - 민감한 정보 암호화
 - 환경변수 활용
 - 로그에 민감 정보 출력 금지

 description:
 globs:
 alwaysApply: false
 ---