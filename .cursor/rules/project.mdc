# Gas Service 프로젝트 전체 규칙

## 프로젝트 개요
이 프로젝트는 블록체인 기반 가스 쿠폰 서비스입니다.
- gas-coupon: NestJS 백엔드 서비스 (쿠폰 관리, 인증)
- nest-wallet: Next.js 프론트엔드 애플리케이션 (지갑 관리)

## 공통 개발 규칙

### 코딩 스타일
- TypeScript 사용 필수
- ESLint 및 Prettier 규칙 준수
- 함수형 프로그래밍 패러다임 선호
- 명확하고 의미있는 변수명/함수명 사용
- 주석은 한글로 작성

### 파일 및 폴더 구조
- 기능별로 모듈 분리
- 일관된 폴더 구조 유지
- 파일명은 kebab-case 사용
- 컴포넌트명은 PascalCase 사용

### 보안 규칙
- 민감한 정보는 환경변수(.env)로 관리
- API 키, 시크릿은 절대 코드에 하드코딩 금지
- 로그에 민감한 정보 출력 금지
- HTTPS 통신 필수

### Git 관리
- 커밋 메시지는 한글로 작성
- 기능별로 브랜치 분리 (feature/기능명)
- PR 리뷰 필수
- .gitignore에 .env, node_modules 등 포함

## 개발 환경

### 현재 실행 중인 서비스
- **데이터베이스**: PostgreSQL (Docker)
- **메시지 큐**: ElasticMQ (Docker)
- **백엔드 서버**: NestJS (자동 반영)
- **프론트엔드 서버**: React (자동 반영)

### 환경 설정
- **개발**: `.env.dev` → `.env` 자동 복사
- **테스트**: `.env.test` → `.env` 자동 복사
- **프로덕션**: `.env.prod` → `.env` 자동 복사

### 개발 워크플로우
1. 코드 수정
2. 자동 저장 및 반영
3. 실시간 확인

## 배포 및 인프라

### CI/CD 파이프라인
- **GitHub Actions**: 자동화된 빌드 및 배포
- **ECR**: Docker 이미지 저장소
- **ECS**: 컨테이너 오케스트레이션
- **ALB**: 로드 밸런싱

### 환경별 설정
- **개발**: 로컬 Docker 환경
- **스테이징**: ECS 환경
- **프로덕션**: ECS 환경 (고가용성)

## 모니터링 및 로깅

### 로깅
- **구조화된 로그**: JSON 형태로 로그 출력
- **로그 레벨**: DEBUG, INFO, WARN, ERROR 구분
- **로그 수집**: CloudWatch Logs 활용

### 모니터링
- **메트릭 수집**: CPU, 메모리, 네트워크 모니터링
- **알람 설정**: 임계값 초과 시 알림
- **대시보드**: 실시간 모니터링 대시보드
description:
globs:
alwaysApply: false
---
