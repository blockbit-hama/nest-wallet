"use client";
import { useState, useEffect } from "react";
import { Button, Card, Input, Select } from "../../components/ui";
import { useWalletList } from "../../hooks/useWalletAtoms";
import { useMasterAddress } from "../../hooks/wallet/useMasterAddress";
import { usePurchaseQuotes, usePurchaseCurrencies, usePurchaseCountries, usePurchaseNetworkFees, usePurchaseProviderStatus, usePurchaseTransaction, usePurchaseCustomerLimits, usePurchaseCustomerKycStatus, usePurchaseHistory } from "../../hooks/queries/usePurchaseQueries";
import "../../types/webview"; // WebView ÌÉÄÏûÖ Ï†ïÏùò Î°úÎìú

// Í∏∞Î≥∏ Î≤ïÏ†ïÌôîÌèê Î™©Î°ù (UI ÌëúÏãúÏö© - Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îäî MoonPay APIÏóêÏÑú)
const BASIC_FIAT_CURRENCIES = [
  { code: 'USD', name: 'US Dollar', symbol: '$' },
  { code: 'EUR', name: 'Euro', symbol: '‚Ç¨' },
  { code: 'GBP', name: 'Pound Sterling', symbol: '¬£' },
  { code: 'CAD', name: 'Canadian Dollar', symbol: 'C$' },
  { code: 'AUD', name: 'Australian Dollar', symbol: 'A$' },
  { code: 'CHF', name: 'Swiss Franc', symbol: 'CHF' },
  { code: 'HKD', name: 'Hong Kong Dollar', symbol: 'HK$' },
  { code: 'MXN', name: 'Mexican Peso', symbol: 'MX$' },
];

// Í∞ÄÏÉÅÏûêÏÇ∞ ÌïÑÌÑ∞ÎßÅ Î°úÏßÅ (Ìñ•ÌõÑ ÌôïÏû•Ïö©)
const filterCryptocurrenciesByFiat = (currencies: any[], fiatCurrency: string, userCountry?: string) => {
  if (!currencies) return [];

  return currencies.filter((currency: any) => {
    // Í∏∞Î≥∏ ÌïÑÌÑ∞ÎßÅ: ÏïîÌò∏ÌôîÌèêÎßå ÏÑ†ÌÉù
    if (currency.type !== 'crypto') return false;

    // ÏßÄÏõêÎêòÏßÄ ÏïäÎäî ÏΩîÏù∏ Ï†úÏô∏
    if (!currency.isSupported) return false;

    // Ìñ•ÌõÑ ÌôïÏû•: Íµ≠Í∞ÄÎ≥Ñ Ï†úÌïúÏÇ¨Ìï≠ ÌôïÏù∏
    if (userCountry && currency.notAllowedCountries?.includes(userCountry)) {
      return false;
    }

    // Ìñ•ÌõÑ ÌôïÏû•: ÎØ∏Íµ≠ ÎÇ¥ ÏßÄÏõê Ïó¨Î∂Ä ÌôïÏù∏ (ÌïÑÏöîÏãú)
    if (userCountry === 'US' && currency.isSupportedInUS === false) {
      return false;
    }

    // Ìñ•ÌõÑ ÌôïÏû•: Î≤ïÏ†ïÌôîÌèêÎ≥Ñ Ï†úÌïúÏÇ¨Ìï≠ (MoonPay APIÏóêÏÑú Ï∂îÍ∞Ä Ï†ïÎ≥¥ Ï†úÍ≥µ Ïãú)
    // ÌòÑÏû¨Îäî Î™®Îì† Î≤ïÏ†ïÌôîÌèêÏóêÏÑú Î™®Îì† ÏïîÌò∏ÌôîÌèê Íµ¨Îß§ Í∞ÄÎä•ÌïòÎã§Í≥† Í∞ÄÏ†ï

    return true;
  });
};

// Í∞ÄÏÉÅÌôîÌèêÎ≥Ñ ÏïÑÏù¥ÏΩò ÏÉùÏÑ± Ìï®Ïàò
const createCoinIcon = (symbol: string) => {
  const iconMap: Record<string, { gradient: string; symbol: string }> = {
    BTC: { gradient: "from-yellow-400 to-orange-500", symbol: "‚Çø" },
    ETH: { gradient: "from-blue-400 to-indigo-500", symbol: "Œû" },
    USDT: { gradient: "from-green-400 to-emerald-500", symbol: "$" },
    SOL: { gradient: "from-purple-400 to-pink-500", symbol: "‚óé" },
    ADA: { gradient: "from-blue-500 to-cyan-500", symbol: "A" },
    DOT: { gradient: "from-pink-500 to-red-500", symbol: "D" },
    MATIC: { gradient: "from-purple-500 to-indigo-600", symbol: "M" },
    LINK: { gradient: "from-blue-600 to-indigo-700", symbol: "L" },
    // Í∏∞Î≥∏ Ïä§ÌÉÄÏùº
    DEFAULT: { gradient: "from-gray-400 to-gray-600", symbol: symbol.charAt(0) }
  };

  const config = iconMap[symbol] || iconMap.DEFAULT;
  return (
    <div className={`w-6 h-6 rounded-full bg-gradient-to-r ${config.gradient} flex items-center justify-center text-white font-bold text-xs`}>
      {config.symbol}
    </div>
  );
};

const PurchaseIcon = () => (
  <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="16" cy="16" r="14" stroke="#F2A003" strokeWidth="2"/>
    <path d="M12 16h8" stroke="#F2A003" strokeWidth="2" strokeLinecap="round"/>
    <path d="M16 12v8" stroke="#F2A003" strokeWidth="2" strokeLinecap="round"/>
    <path d="M20 8l4 4-4 4" stroke="#F2A003" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
  </svg>
);

export default function PurchasePage() {
  const { selectedWallet, loadWallets, walletList, refreshWalletList } = useWalletList();
  const { masterAddress } = useMasterAddress();

  // Í∞ïÏ†ú ÏßÄÍ∞ë Î°úÎìú Ìï®Ïàò
  const forceLoadWallet = () => {
    console.log('üîÑ [Purchase Page] Force loading wallet...');
    refreshWalletList();

    // ÏßÄÏó∞ ÌõÑ Îã§Ïãú ÏãúÎèÑ
    setTimeout(() => {
      if (!selectedWallet) {
        console.log('üîÑ [Purchase Page] Still no wallet, trying loadWallets...');
        loadWallets();
      }
    }, 500);
  };

  // ÏßÄÍ∞ë Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const hasWalletData = localStorage.getItem('nest-wallets') && localStorage.getItem('selectedWalletId');
      if (!selectedWallet && hasWalletData) {
        loadWallets();
      } else if (!selectedWallet && walletList.length === 0) {
        loadWallets();
      }
    }
  }, []);
  const [selectedCurrency, setSelectedCurrency] = useState<string>('BTC');
  const [amount, setAmount] = useState<string>('100');
  const [fiatCurrency, setFiatCurrency] = useState<string>('USD');
  const [selectedCountry, setSelectedCountry] = useState<string>('');
  const [selectedProvider, setSelectedProvider] = useState<string | null>(null);
  const [step, setStep] = useState<'quote' | 'confirm' | 'processing' | 'complete'>('quote');
  const [transactionId, setTransactionId] = useState<string | null>(null);

  // MoonPay APIÏóêÏÑú ÏßÄÏõêÌïòÎäî Î≤ïÏ†ïÌôîÌèê Î™©Î°ù Ï∂îÏ∂ú
  const getSupportedFiatCurrencies = () => {
    if (!currencies) return BASIC_FIAT_CURRENCIES;

    // MoonPay currencies APIÏóêÏÑú typeÏù¥ 'fiat'Ïù∏ ÌÜµÌôîÎì§Îßå ÌïÑÌÑ∞ÎßÅ
    const moonPayFiats = Object.entries(currencies)
      .filter(([symbol, currency]: [string, any]) => currency.type === 'fiat')
      .map(([symbol, currency]: [string, any]) => ({
        code: currency.code.toUpperCase(),
        name: currency.name,
        symbol: getDefaultSymbol(currency.code.toUpperCase()), // Í∏∞Î≥∏ Ïã¨Î≥º Îß§Ìïë
        moonPayData: currency
      }));

    // MoonPayÏóêÏÑú Í∞ÄÏ†∏Ïò® Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í
    return moonPayFiats.length > 0 ? moonPayFiats : BASIC_FIAT_CURRENCIES;
  };

  // ÌÜµÌôî ÏΩîÎìúÏóê Îî∞Î•∏ Í∏∞Î≥∏ Ïã¨Î≥º Îß§Ìïë
  const getDefaultSymbol = (code: string): string => {
    const symbolMap: Record<string, string> = {
      'USD': '$', 'EUR': '‚Ç¨', 'GBP': '¬£', 'CAD': 'C$', 'AUD': 'A$',
      'CHF': 'CHF', 'HKD': 'HK$', 'MXN': 'MX$', 'JPY': '¬•', 'KRW': '‚Ç©'
    };
    return symbolMap[code] || code;
  };

  // ÏÑ†ÌÉùÎêú Î≤ïÏ†ïÌôîÌèêÏùò Ïã¨Î≥º Í∞ÄÏ†∏Ïò§Í∏∞
  const getFiatSymbol = (code: string): string => {
    const supportedFiats = getSupportedFiatCurrencies();
    const fiat = supportedFiats.find(f => f.code === code);
    return fiat?.symbol || getDefaultSymbol(code);
  };

  // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏàòÏàòÎ£å Í∞ÄÏ†∏Ïò§Í∏∞ Ìó¨Ìçº Ìï®Ïàò
  const getNetworkFee = (currency: string, fiatCurrency: string): number | null => {
    if (!networkFees) return null;

    const currencyUpper = currency.toUpperCase();
    const fiatUpper = fiatCurrency.toUpperCase();

    // MoonPay network fees API ÏùëÎãµ Íµ¨Ï°∞: { "BTC": { "USD": 2.76, "GBP": 2.18 }, "ETH": { "USD": 6.52, "GBP": 5.14 } }
    if (networkFees[currencyUpper] && networkFees[currencyUpper][fiatUpper]) {
      return networkFees[currencyUpper][fiatUpper];
    }

    return null;
  };

  // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Î°úÍπÖ Î∞è ÏßÄÍ∞ë Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    console.log('üîµ [Purchase Page] Component mounted');
    console.log('üîµ [Purchase Page] Environment:', {
      NODE_ENV: process.env.NODE_ENV,
      NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL,
      windowLocation: window.location.href
    });
    console.log('üîµ [Purchase Page] = WALLET DEBUG START =');
    console.log('selectedWallet:', selectedWallet);
    console.log('walletList.length:', walletList.length);
    console.log('walletList:', walletList);
    console.log('localStorage nest-wallets:', localStorage.getItem('nest-wallets'));
    console.log('localStorage selectedWalletId:', localStorage.getItem('selectedWalletId'));
    console.log('üîµ [Purchase Page] = WALLET DEBUG END =');
    console.log('üîµ [Purchase Page] Initial State:', {
      selectedCurrency,
      amount,
      fiatCurrency,
      step
    });

    // ÏßÄÍ∞ëÏù¥ ÏóÜÏúºÎ©¥ Î°úÎìú ÏãúÎèÑ
    if (!selectedWallet && typeof window !== 'undefined') {
      console.log('üü° [Purchase Page] No wallet selected, trying to load wallets...');

      // useWalletList hookÏóêÏÑú loadWallets Ìò∏Ï∂ú
      const { loadWallets } = require('../../hooks/useWalletAtoms');
      if (typeof loadWallets === 'function') {
        console.log('üü° [Purchase Page] Calling loadWallets...');
        loadWallets();
      }
    }
  }, [selectedWallet]);

  // API ÏøºÎ¶¨Îì§
  const { data: currencies, isLoading: currenciesLoading, error: currenciesError } = usePurchaseCurrencies();
  const { data: countries, isLoading: countriesLoading, error: countriesError } = usePurchaseCountries();
  const { data: networkFees, isLoading: networkFeesLoading, error: networkFeesError } = usePurchaseNetworkFees();
  const {
    data: providerStatus,
    isLoading: providerStatusLoading,
    error: providerStatusError
  } = usePurchaseProviderStatus();

  // üî• Customer Limits Ï°∞Ìöå (masterAddressÍ∞Ä externalCustomerId)
  const {
    data: customerLimits,
    isLoading: customerLimitsLoading,
    error: customerLimitsError
  } = usePurchaseCustomerLimits(masterAddress);

  // üî• Customer KYC Status Ï°∞Ìöå (Îç∞Î™®Ïö© - Î™®Îì† MoonPay Îç∞Ïù¥ÌÑ∞ ÌëúÏãú)
  const {
    data: customerKycStatus,
    isLoading: customerKycStatusLoading,
    error: customerKycStatusError
  } = usePurchaseCustomerKycStatus(masterAddress);

  // üî• Purchase History Ï°∞Ìöå (Îç∞Î™®Ïö© - Î™®Îì† MoonPay Ìä∏ÎûúÏû≠ÏÖò Îç∞Ïù¥ÌÑ∞ ÌëúÏãú)
  const {
    data: purchaseHistory,
    isLoading: purchaseHistoryLoading,
    error: purchaseHistoryError
  } = usePurchaseHistory(masterAddress, 10); // ÏµúÍ∑º 10Í∞ú

  // Currencies ÏÉÅÌÉú Î≥ÄÍ≤Ω Î°úÍπÖ Î∞è Ï¥àÍ∏∞ ÌôîÌèê ÏÑ§Ï†ï
  useEffect(() => {
    if (currenciesLoading) {
      console.log('üü° [Purchase API] Loading currencies...');
    } else if (currenciesError) {
      console.error('üî¥ [Purchase API] Currencies error:', currenciesError);
    } else if (currencies) {
      console.log('üü¢ [Purchase API] Currencies loaded:', currencies);

      // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÌôîÌèêÍ∞Ä ÏßÄÏõêÎêòÏßÄ ÏïäÏúºÎ©¥ BTCÎ•º Í∏∞Î≥∏Í∞íÏúºÎ°ú ÏÑ§Ï†ï
      const availableCurrencies = Object.keys(currencies);
      if (availableCurrencies.length > 0) {
        // BTCÎÇò btcÍ∞Ä ÏûàÎäîÏßÄ ÎåÄÏÜåÎ¨∏Ïûê Íµ¨Î∂ÑÏóÜÏù¥ Ï∞æÍ∏∞
        const btcKey = availableCurrencies.find(key => key.toUpperCase() === 'BTC');

        if (!selectedCurrency || !availableCurrencies.includes(selectedCurrency)) {
          const defaultCurrency = btcKey || availableCurrencies[0];
          console.log(`üü¶ [Auto Select] Setting default currency to ${defaultCurrency}`);
          setSelectedCurrency(defaultCurrency);
        } else if (selectedCurrency === 'BTC' && btcKey && btcKey !== 'BTC') {
          // Ï¥àÍ∏∞Í∞íÏù¥ 'BTC'Ïù∏Îç∞ Ïã§Ï†ú ÌÇ§Í∞Ä 'btc'Ïù∏ Í≤ΩÏö∞ Ï°∞Ï†ï
          console.log(`üü¶ [Auto Select] Adjusting BTC case from ${selectedCurrency} to ${btcKey}`);
          setSelectedCurrency(btcKey);
        }
      }
    }
  }, [currencies, currenciesLoading, currenciesError, selectedCurrency]);

  // Countries ÏÉÅÌÉú Î≥ÄÍ≤Ω Î°úÍπÖ
  useEffect(() => {
    if (countriesLoading) {
      console.log('üü° [Purchase API] Loading countries...');
    } else if (countriesError) {
      console.error('üî¥ [Purchase API] Countries error:', countriesError);
    } else if (countries) {
      console.log('üü¢ [Purchase API] Countries loaded:', countries);
    }
  }, [countries, countriesLoading, countriesError]);

  // Network Fees ÏÉÅÌÉú Î≥ÄÍ≤Ω Î°úÍπÖ
  useEffect(() => {
    if (networkFeesLoading) {
      console.log('üü° [Purchase API] Loading network fees...');
    } else if (networkFeesError) {
      console.error('üî¥ [Purchase API] Network fees error:', networkFeesError);
    } else if (networkFees) {
      console.log('üü¢ [Purchase API] Network fees loaded:', networkFees);
    }
  }, [networkFees, networkFeesLoading, networkFeesError]);

  // Provider Status ÏÉÅÌÉú Î≥ÄÍ≤Ω Î°úÍπÖ
  useEffect(() => {
    if (providerStatusLoading) {
      console.log('üü° [Purchase API] Loading provider status...');
    } else if (providerStatusError) {
      console.error('üî¥ [Purchase API] Provider status error:', providerStatusError);
    } else if (providerStatus) {
      console.log('üü¢ [Purchase API] Provider status loaded:', providerStatus);

      // Í∞Å ÌîÑÎ°úÎ∞îÏù¥Îçî ÏÉÅÌÉú ÏÉÅÏÑ∏ Î°úÍπÖ
      Object.entries(providerStatus.providers || {}).forEach(([provider, status]) => {
        const statusInfo = status as any;
        console.log(`üìä [Provider ${provider.toUpperCase()}]`, {
          available: statusInfo.available,
          lastChecked: statusInfo.lastChecked,
          error: statusInfo.error
        });
      });
    }
  }, [providerStatus, providerStatusLoading, providerStatusError]);

  // üî• Customer Limits ÏÉÅÌÉú Î≥ÄÍ≤Ω Î°úÍπÖ
  useEffect(() => {
    if (customerLimitsLoading) {
      console.log('üü° [Purchase API] Loading customer limits...');
    } else if (customerLimitsError) {
      console.error('üî¥ [Purchase API] Customer limits error:', customerLimitsError);
    } else if (customerLimits) {
      console.log('üü¢ [Purchase API] Customer limits loaded:', customerLimits);
      console.log('üí∞ [Customer Limits Info]', {
        customerId: customerLimits.customerId,
        externalCustomerId: customerLimits.externalCustomerId,
        kycStatus: customerLimits.kycStatus,
        kycLevel: customerLimits.kycLevel,
        limitsCount: customerLimits.limits?.length || 0
      });
    }
  }, [customerLimits, customerLimitsLoading, customerLimitsError]);

  // üî• Customer KYC Status ÏÉÅÌÉú Î≥ÄÍ≤Ω Î°úÍπÖ
  useEffect(() => {
    if (customerKycStatusLoading) {
      console.log('üü° [Purchase API] Loading customer KYC status...');
    } else if (customerKycStatusError) {
      console.error('üî¥ [Purchase API] Customer KYC status error:', customerKycStatusError);
    } else if (customerKycStatus) {
      console.log('üü¢ [Purchase API] Customer KYC status loaded:', customerKycStatus);
      console.log('üîê [KYC Status Info]', {
        customerId: customerKycStatus.customerId,
        externalCustomerId: customerKycStatus.externalCustomerId,
        kycStatus: customerKycStatus.kycStatus,
        kycLevel: customerKycStatus.kycLevel,
        fallback: customerKycStatus.fallback || false
      });
    }
  }, [customerKycStatus, customerKycStatusLoading, customerKycStatusError]);

  // üî• Purchase History ÏÉÅÌÉú Î≥ÄÍ≤Ω Î°úÍπÖ
  useEffect(() => {
    if (purchaseHistoryLoading) {
      console.log('üü° [Purchase API] Loading purchase history...');
    } else if (purchaseHistoryError) {
      console.error('üî¥ [Purchase API] Purchase history error:', purchaseHistoryError);
    } else if (purchaseHistory) {
      console.log('üü¢ [Purchase API] Purchase history loaded:', purchaseHistory);
      console.log('üìú [Purchase History Info]', {
        historyCount: purchaseHistory.length,
        transactions: purchaseHistory.map(tx => ({
          id: tx.id,
          status: tx.status,
          currency: tx.currency,
          amount: tx.amount,
          createdAt: tx.createdAt
        }))
      });
    }
  }, [purchaseHistory, purchaseHistoryLoading, purchaseHistoryError]);

  const {
    data: quotes,
    isLoading: quotesLoading,
    error: quotesError,
    refetch: refetchQuotes
  } = usePurchaseQuotes(
    selectedCurrency,
    parseFloat(amount) || 0,
    fiatCurrency,
    { enabled: false }
  );

  // Quotes ÏÉÅÌÉú Î≥ÄÍ≤Ω Î°úÍπÖ
  useEffect(() => {
    if (quotesLoading) {
      console.log('üü° [Purchase API] Loading quotes...');
    } else if (quotesError) {
      console.error('üî¥ [Purchase API] Quotes error:', quotesError);
    } else if (quotes) {
      console.log('üü¢ [Purchase API] Quotes loaded:', quotes);
    }
  }, [quotes, quotesLoading, quotesError]);

  // ÏÇ¨Ïö©Ïûê ÏûÖÎ†• Î≥ÄÍ≤Ω Î°úÍπÖ
  useEffect(() => {
    console.log('üü¶ [User Input] Currency changed:', selectedCurrency);
  }, [selectedCurrency]);

  useEffect(() => {
    console.log('üü¶ [User Input] Amount changed:', amount);
  }, [amount]);

  useEffect(() => {
    console.log('üü¶ [State] Step changed:', step);
  }, [step]);


  const createTransactionMutation = usePurchaseTransaction();

  // Í≤¨Ï†Å Ï°∞Ìöå
  const handleGetQuotes = async () => {
    console.log('üü¶ [User Action] Get quotes button clicked');
    console.log('üü¶ [User Action] Quote request params:', {
      selectedCurrency,
      amount,
      fiatCurrency,
      selectedWallet: selectedWallet?.name || 'none'
    });

    if (!amount || parseFloat(amount) <= 0) {
      console.warn('‚ö†Ô∏è [Validation] Invalid amount:', amount);
      return;
    }

    console.log('üü° [Purchase API] Fetching quotes...');
    try {
      const result = await refetchQuotes();
      console.log('üü¢ [Purchase API] Quotes fetched:', result.data);
    } catch (error) {
      console.error('üî¥ [Purchase API] Quote fetch error:', error);
    }
  };

  // ÏÑ†ÌÉùÎêú ÌÜµÌôîÏóê ÎßûÎäî Ïã§Ï†ú Î∏îÎ°ùÏ≤¥Ïù∏ Ï£ºÏÜå Í∞ÄÏ†∏Ïò§Í∏∞
  const getWalletAddressForCurrency = (currency: string): string | null => {
    console.log('üè¶ [Wallet] Address lookup started:', {
      currency,
      hasSelectedWallet: !!selectedWallet,
      walletId: selectedWallet?.id
    });

    if (!selectedWallet) {
      console.warn('‚ö†Ô∏è [Wallet] No wallet selected');
      return null;
    }

    const currencyMap: Record<string, string> = {
      'btc': 'BTC',
      'BTC': 'BTC',
      'eth': 'ETH',
      'ETH': 'ETH',
      'ethereum': 'ETH',
      'usdt': 'USDT',
      'USDT': 'USDT',
      'tether': 'USDT',
      'sol': 'SOL',
      'SOL': 'SOL',
      'solana': 'SOL'
    };

    const addressKey = currencyMap[currency.toLowerCase()];
    const address = selectedWallet.addresses?.[addressKey];

    console.log('üè¶ [Wallet] Address lookup details:', {
      currency,
      currencyLower: currency.toLowerCase(),
      addressKey,
      address: address ? `${address.slice(0, 10)}...${address.slice(-6)}` : 'not found',
      availableAddresses: selectedWallet.addresses ? Object.keys(selectedWallet.addresses) : [],
      walletAddresses: selectedWallet.addresses
    });

    return address || null;
  };

  // Í±∞Îûò ÏÉùÏÑ±
  const handleCreateTransaction = async (providerId: string) => {
    console.log('üü¶ [User Action] Create transaction clicked');

    const walletAddress = getWalletAddressForCurrency(selectedCurrency);

    console.log('üü¶ [User Action] Transaction params:', {
      providerId,
      selectedCurrency,
      amount,
      walletAddress: walletAddress ? `${walletAddress.slice(0, 10)}...` : 'not found',
      selectedWallet: selectedWallet?.name || 'none'
    });

    if (!selectedWallet || !amount || !walletAddress) {
      console.warn('‚ö†Ô∏è [Validation] Missing required data:', {
        selectedWallet: !!selectedWallet,
        amount: !!amount,
        walletAddress: !!walletAddress,
        selectedCurrency
      });
      return;
    }

    try {
      console.log('üü° [Transaction] Setting step to processing...');
      setStep('processing');

      // üî• External Transaction ID ÏÉùÏÑ± (UUID ÌòïÌÉú)
      const externalTransactionId = `nest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      // üî• Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóê externalTransactionId Ï†ÄÏû•
      const transactionHistory = JSON.parse(localStorage.getItem('nest-transaction-history') || '[]');
      transactionHistory.push({
        externalTransactionId,
        providerId,
        currency: selectedCurrency,
        amount: parseFloat(amount),
        userWalletAddress: walletAddress,
        masterAddress,
        createdAt: new Date().toISOString(),
        status: 'pending'
      });
      localStorage.setItem('nest-transaction-history', JSON.stringify(transactionHistory));
      
      console.log('üü¢ [Storage] External transaction ID saved:', externalTransactionId);

      const transactionRequest = {
        providerId,
        currency: selectedCurrency,
        amount: parseFloat(amount),
        userWalletAddress: walletAddress, // Ïã§Ï†ú Î∏îÎ°ùÏ≤¥Ïù∏ Ï£ºÏÜå ÏÇ¨Ïö©
        fiatCurrency: fiatCurrency, // üî• ÏÑ†ÌÉùÌïú Í≤∞Ï†ú ÌÜµÌôî Ï∂îÍ∞Ä
        masterAddress: masterAddress, // üî• ÏßÄÍ∞ë Í≥†Ïú† ID Ï∂îÍ∞Ä
        externalCustomerId: masterAddress, // üî• Ïô∏Î∂Ä Í≥†Í∞ù ID (masterAddressÏôÄ ÎèôÏùº)
        externalTransactionId: externalTransactionId, // üî• Ïô∏Î∂Ä Ìä∏ÎûúÏû≠ÏÖò ID (Î°úÏª¨ Ï∂îÏ†ÅÏö©)
        userEmail: 'user@example.com',
        returnUrl: `${window.location.origin}/purchase/result`,
        webhookUrl: `${process.env.NEXT_PUBLIC_API_URL || 'https://intergroup-fanny-overliterary.ngrok-free.dev'}/api/webhook/purchase`
      };

      console.log('üü° [Purchase API] Creating transaction:', transactionRequest);
      const result = await createTransactionMutation.mutateAsync(transactionRequest);
      console.log('üü¢ [Purchase API] Transaction created:', result);

      setTransactionId(result.transactionId);
      setStep('complete');
      console.log('üü¢ [Transaction] Transaction completed, ID:', result.transactionId);

      // Ïã§Ï†ú Í≤∞Ï†ú URLÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
      if (result.paymentUrl) {
        console.log('üîó [Redirect] Opening payment URL:', result.paymentUrl);

        // WebView ÌôòÍ≤Ω Í∞êÏßÄ Î∞è Ï≤òÎ¶¨
        if (window.isReactNativeWebView && window.nativeApp) {
          console.log('üì± [WebView] Using native app redirect');
          window.nativeApp.openExternalUrl(result.paymentUrl);
        } else {
          console.log('üåê [Browser] Opening in new tab');
          // ÏÉà ÌÉ≠ÏóêÏÑú Ïó¥Í∏∞
          window.open(result.paymentUrl, '_blank', 'noopener,noreferrer');
        }
      }
    } catch (error) {
      console.error('üî¥ [Transaction] Transaction creation failed:', error);
      setStep('quote');
    }
  };

  if (!selectedWallet) {
    return (
      <div className="min-h-screen bg-[#14151A] text-white p-4">
        <Card className="bg-[#23242A] border-gray-700">
          <div className="p-6 text-center">
            <PurchaseIcon />
            <h2 className="text-xl font-bold text-white mb-4 mt-4">ÏßÄÍ∞ë ÏÑ†ÌÉù ÌïÑÏöî</h2>
            <p className="text-gray-400 mb-4">
              Íµ¨Îß§ Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©ÌïòÎ†§Î©¥ Î®ºÏ†Ä ÏßÄÍ∞ëÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.
            </p>
            <div className="text-sm text-gray-500">
              {walletList.length === 0 ? (
                <p>ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏßÄÍ∞ëÏù¥ ÏóÜÏäµÎãàÎã§. ÏßÄÍ∞ëÏùÑ Î®ºÏ†Ä ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.</p>
              ) : (
                <p>{walletList.length}Í∞ú ÏßÄÍ∞ëÏù¥ ÏûàÏßÄÎßå ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.</p>
              )}
            </div>
            <button
              onClick={forceLoadWallet}
              className="mt-4 px-4 py-2 bg-[#F2A003] text-black rounded-lg hover:bg-[#F2A003]/80 transition-colors"
            >
              ÏßÄÍ∞ë Î°úÎìú Ïû¨ÏãúÎèÑ
            </button>
            <div className="mt-2 text-xs text-gray-600">
              ÎîîÎ≤ÑÍπÖ: localStorageÏóê ÏßÄÍ∞ë Îç∞Ïù¥ÌÑ∞Í∞Ä {typeof window !== 'undefined' && localStorage.getItem('nest-wallets') ? 'ÏûàÏäµÎãàÎã§' : 'ÏóÜÏäµÎãàÎã§'}
            </div>
          </div>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#14151A] text-white px-2 py-1">
      <div className="max-w-md mx-auto">
        {/* Ìó§Îçî */}
        <div className="flex items-center justify-between mb-2">
          <div className="flex flex-col">
            <h1 className="text-xl font-bold text-white">ÏïîÌò∏ÌôîÌèê Íµ¨Îß§</h1>
            {/* Master Address ÌïúÏ§ÑÎ°ú ÏÉÅÎã®Ïóê ÌëúÏãú */}
            {masterAddress && (
              <p className="text-sm text-gray-400 font-mono">
                ID: {masterAddress}
              </p>
            )}
          </div>
          <div className="flex items-center gap-2">
            <Button
              onClick={() => window.location.href = '/purchase/history'}
              className="px-2 py-0.5 text-sm bg-gray-600 hover:bg-gray-500 text-white"
            >
              ÌûàÏä§ÌÜ†Î¶¨
            </Button>
            <PurchaseIcon />
          </div>
        </div>

        {/* üî• Íµ¨Îß§ ÌïúÎèÑ Ï†ïÎ≥¥ (Íµ¨Îß§ ÌéòÏù¥ÏßÄ ÏÉÅÎã®) */}
        {masterAddress && (
          <Card className="bg-[#23242A] border-gray-700 mb-2">
            <div className="p-2">
              <h3 className="text-sm font-medium text-gray-400 mb-2">Íµ¨Îß§ ÌïúÎèÑ Ï†ïÎ≥¥</h3>

              {customerLimitsLoading && (
                <div className="flex items-center gap-2 text-gray-400">
                  <div className="animate-spin w-4 h-4 border-2 border-gray-600 border-t-gray-400 rounded-full"></div>
                  <span className="text-sm">ÌïúÎèÑ Ï†ïÎ≥¥ Î°úÎî© Ï§ë...</span>
                </div>
              )}

              {customerLimitsError && (
                <div className="p-2 bg-yellow-600/20 border border-yellow-600/30 rounded-lg">
                  <div className="flex items-start gap-2">
                    <span className="text-yellow-400 mt-0.5">‚ÑπÔ∏è</span>
                    <div className="text-sm">
                      <p className="text-yellow-300 font-medium">Ï≤´ Íµ¨Îß§ Í≥†Í∞ù</p>
                      <p className="text-yellow-200/80 text-xs">
                        MoonPayÏóêÏÑú Ï≤´ Íµ¨Îß§Î•º ÏßÑÌñâÌïòÏãúÎ©¥ KYC Ïù∏Ï¶ù ÌõÑ ÌïúÎèÑÍ∞Ä ÏÑ§Ï†ïÎê©ÎãàÎã§.
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {customerLimits && !customerLimitsLoading && !customerLimitsError && (
                <>
                  {/* KYC ÏÉÅÌÉú */}
                  <div className="grid grid-cols-2 gap-2 text-sm mb-3">
                    <div className="bg-gray-800/30 p-2 rounded">
                      <div className="text-gray-400 text-xs">KYC ÏÉÅÌÉú</div>
                      <div className={`font-medium text-xs ${
                        customerLimits.kycStatus === 'completed' ? 'text-green-400' :
                        customerLimits.kycStatus === 'pending' ? 'text-yellow-400' : 'text-red-400'
                      }`}>
                        {customerLimits.kycStatus === 'completed' ? '‚úÖ Ïù∏Ï¶ù ÏôÑÎ£å' :
                         customerLimits.kycStatus === 'pending' ? '‚è≥ Ïù∏Ï¶ù Ï§ë' :
                         customerLimits.kycStatus === 'review' ? 'üîç Í≤ÄÌÜ† Ï§ë' : '‚ùå ÎØ∏Ïù∏Ï¶ù'}
                      </div>
                    </div>
                    <div className="bg-gray-800/30 p-2 rounded">
                      <div className="text-gray-400 text-xs">Ïù∏Ï¶ù Î†àÎ≤®</div>
                      <div className="text-white font-medium text-xs">
                        Level {customerLimits.kycLevel}
                      </div>
                    </div>
                  </div>

                  {/* Íµ¨Îß§ ÌïúÎèÑ Ï†ïÎ≥¥ */}
                  {customerLimits.limits && customerLimits.limits.length > 0 && (
                    <div className="space-y-2">
                      {customerLimits.limits
                        .filter(limit => limit.type.startsWith('buy_'))
                        .slice(0, 2) // ÏÉÅÏúÑ 2Í∞ú Í≤∞Ï†ú ÏàòÎã®Îßå ÌëúÏãú
                        .map((limit, index) => {
                          // Í≤∞Ï†ú ÏàòÎã® Ïù¥Î¶Ñ Îß§Ìïë
                          const paymentMethodNames: Record<string, string> = {
                            'buy_credit_debit_card': 'üí≥ Ïπ¥ÎìúÍ≤∞Ï†ú',
                            'buy_bank_transfer': 'üè¶ Í≥ÑÏ¢åÏù¥Ï≤¥',
                            'buy_ach_bank_transfer': 'üè¶ ACH Ïù¥Ï≤¥',
                            'buy_sepa_bank_transfer': 'üè¶ SEPA Ïù¥Ï≤¥',
                            'buy_gbp_bank_transfer': 'üè¶ GBP Ïù¥Ï≤¥',
                            'buy_mobile_wallet': 'üì± Î™®Î∞îÏùº ÏßÄÍ∞ë'
                          };

                          const paymentName = paymentMethodNames[limit.type] || `üí∞ ${limit.type}`;
                          const dailyUsagePercent = limit.dailyLimit > 0 ?
                            ((limit.dailyLimit - limit.dailyLimitRemaining) / limit.dailyLimit * 100) : 0;
                          const monthlyUsagePercent = limit.monthlyLimit > 0 ?
                            ((limit.monthlyLimit - limit.monthlyLimitRemaining) / limit.monthlyLimit * 100) : 0;

                          return (
                            <div key={index} className="bg-blue-900/20 border border-blue-700/30 rounded p-2">
                              <div className="flex justify-between items-center mb-1">
                                <span className="text-blue-300 text-xs font-medium">{paymentName}</span>
                                <span className="text-xs text-gray-400">
                                  {customerLimits.liveMode ? 'üî¥ Ïã§Ï†ú' : 'üü° ÌÖåÏä§Ìä∏'}
                                </span>
                              </div>

                              <div className="grid grid-cols-2 gap-2 text-xs">
                                <div>
                                  <div className="text-gray-400">ÏùºÏùº ÌïúÎèÑ</div>
                                  <div className="text-white font-mono">
                                    ${limit.dailyLimitRemaining?.toLocaleString() || '0'} / ${limit.dailyLimit?.toLocaleString() || '0'}
                                  </div>
                                  <div className="bg-gray-700 rounded-full h-1 mt-1">
                                    <div
                                      className="bg-blue-400 h-1 rounded-full transition-all"
                                      style={{ width: `${dailyUsagePercent}%` }}
                                    ></div>
                                  </div>
                                </div>
                                <div>
                                  <div className="text-gray-400">ÏõîÍ∞Ñ ÌïúÎèÑ</div>
                                  <div className="text-white font-mono">
                                    ${limit.monthlyLimitRemaining?.toLocaleString() || '0'} / ${limit.monthlyLimit?.toLocaleString() || '0'}
                                  </div>
                                  <div className="bg-gray-700 rounded-full h-1 mt-1">
                                    <div
                                      className="bg-green-400 h-1 rounded-full transition-all"
                                      style={{ width: `${monthlyUsagePercent}%` }}
                                    ></div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          );
                        })}

                      {/* Îçî ÎßéÏùÄ ÌïúÎèÑ Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ Í∞ÑÎã®Ìûà ÌëúÏãú */}
                      {customerLimits.limits.filter(limit => limit.type.startsWith('buy_')).length > 2 && (
                        <div className="text-center">
                          <span className="text-xs text-gray-500">
                            +{customerLimits.limits.filter(limit => limit.type.startsWith('buy_')).length - 2}Í∞ú Ï∂îÍ∞Ä Í≤∞Ï†ú ÏàòÎã®
                          </span>
                        </div>
                      )}
                    </div>
                  )}

                  {/* ÌïúÎèÑÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ */}
                  {(!customerLimits.limits || customerLimits.limits.length === 0) && (
                    <div className="p-2 bg-gray-600/20 border border-gray-600/30 rounded-lg">
                      <div className="flex items-start gap-2">
                        <span className="text-gray-400 mt-0.5">‚ÑπÔ∏è</span>
                        <div className="text-sm">
                          <p className="text-gray-300 font-medium">ÌïúÎèÑ Ï†ïÎ≥¥ ÏóÜÏùå</p>
                          <p className="text-gray-400 text-xs">
                            Ï≤´ Íµ¨Îß§ ÏßÑÌñâ Ïãú KYC Ïù∏Ï¶ù ÌõÑ ÌïúÎèÑÍ∞Ä ÏÑ§Ï†ïÎê©ÎãàÎã§.
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                </>
              )}
            </div>
          </Card>
        )}

        {/* üî• KYC ÏÉÅÏÑ∏ ÏÉÅÌÉú (Îç∞Î™®Ïö© - Î™®Îì† MoonPay Îç∞Ïù¥ÌÑ∞ ÌëúÏãú) */}
        {masterAddress && (
          <Card className="bg-[#23242A] border-gray-700 mb-2">
            <div className="p-2">
              <h3 className="text-sm font-medium text-gray-400 mb-2">KYC ÏÉÅÏÑ∏ Ï†ïÎ≥¥ (MoonPay ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞)</h3>

              {customerKycStatusLoading && (
                <div className="flex items-center gap-2 text-gray-400">
                  <div className="animate-spin w-4 h-4 border-2 border-gray-600 border-t-gray-400 rounded-full"></div>
                  <span className="text-sm">KYC Ï†ïÎ≥¥ Î°úÎî© Ï§ë...</span>
                </div>
              )}

              {customerKycStatusError && (
                <div className="p-2 bg-yellow-600/20 border border-yellow-600/30 rounded-lg">
                  <div className="flex items-start gap-2">
                    <span className="text-yellow-400 mt-0.5">‚ÑπÔ∏è</span>
                    <div className="text-sm">
                      <p className="text-yellow-300 font-medium">KYC Ï†ïÎ≥¥ ÏóÜÏùå</p>
                      <p className="text-yellow-200/80 text-xs">
                        Ï≤´ Íµ¨Îß§ Ïãú MoonPayÏóêÏÑú KYC Ïù∏Ï¶ùÏù¥ ÏßÑÌñâÎê©ÎãàÎã§.
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {customerKycStatus && !customerKycStatusLoading && !customerKycStatusError && (
                <div className="bg-purple-900/20 border border-purple-700/30 rounded p-2">
                  <div className="text-purple-300 text-xs font-medium mb-2">
                    MoonPay KYC ÏãúÏä§ÌÖú Ï†ïÎ≥¥ {customerKycStatus.fallback && '(Fallback Î™®Îìú)'}
                  </div>

                  <div className="space-y-2 text-xs">
                    {/* Í∏∞Î≥∏ Í≥†Í∞ù Ï†ïÎ≥¥ */}
                    <div className="grid grid-cols-2 gap-2">
                      <div>
                        <div className="text-gray-400">Í≥†Í∞ù ID</div>
                        <div className="text-white font-mono text-xs">{customerKycStatus.customerId}</div>
                      </div>
                      <div>
                        <div className="text-gray-400">Ïô∏Î∂Ä Í≥†Í∞ù ID</div>
                        <div className="text-white font-mono text-xs">{customerKycStatus.externalCustomerId}</div>
                      </div>
                    </div>

                    {/* KYC ÏÉÅÌÉú */}
                    <div className="grid grid-cols-2 gap-2">
                      <div>
                        <div className="text-gray-400">KYC ÏÉÅÌÉú</div>
                        <div className={`font-medium text-xs ${
                          customerKycStatus.kycStatus === 'completed' ? 'text-green-400' :
                          customerKycStatus.kycStatus === 'pending' ? 'text-yellow-400' :
                          customerKycStatus.kycStatus === 'review' ? 'text-orange-400' : 'text-red-400'
                        }`}>
                          {customerKycStatus.kycStatus}
                        </div>
                      </div>
                      <div>
                        <div className="text-gray-400">KYC Î†àÎ≤®</div>
                        <div className="text-white font-medium text-xs">Level {customerKycStatus.kycLevel}</div>
                      </div>
                    </div>

                    {/* ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ */}
                    {(customerKycStatus.createdAt || customerKycStatus.updatedAt) && (
                      <div className="grid grid-cols-2 gap-2">
                        {customerKycStatus.createdAt && (
                          <div>
                            <div className="text-gray-400">ÏÉùÏÑ±ÏùºÏãú</div>
                            <div className="text-green-300 text-xs">
                              {new Date(customerKycStatus.createdAt).toLocaleString('ko-KR')}
                            </div>
                          </div>
                        )}
                        {customerKycStatus.updatedAt && (
                          <div>
                            <div className="text-gray-400">ÏàòÏ†ïÏùºÏãú</div>
                            <div className="text-yellow-300 text-xs">
                              {new Date(customerKycStatus.updatedAt).toLocaleString('ko-KR')}
                            </div>
                          </div>
                        )}
                      </div>
                    )}

                    {/* Fallback Ï†ïÎ≥¥ */}
                    {customerKycStatus.fallback && customerKycStatus.transactionId && (
                      <div className="bg-orange-800/30 p-2 rounded">
                        <div className="text-orange-300 text-xs font-medium">Fallback Ï†ïÎ≥¥</div>
                        <div className="text-orange-200 text-xs">
                          Ìä∏ÎûúÏû≠ÏÖò ID: {customerKycStatus.transactionId}
                        </div>
                      </div>
                    )}

                    {/* Î©îÏãúÏßÄ */}
                    {customerKycStatus.message && (
                      <div className="bg-blue-800/30 p-2 rounded">
                        <div className="text-blue-300 text-xs font-medium">Î©îÏãúÏßÄ</div>
                        <div className="text-blue-200 text-xs">{customerKycStatus.message}</div>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </Card>
        )}

        {/* üî• Íµ¨Îß§ ÌûàÏä§ÌÜ†Î¶¨ (Îç∞Î™®Ïö© - Î™®Îì† MoonPay Ìä∏ÎûúÏû≠ÏÖò Îç∞Ïù¥ÌÑ∞ ÌëúÏãú) */}
        {masterAddress && (
          <Card className="bg-[#23242A] border-gray-700 mb-2">
            <div className="p-2">
              <h3 className="text-sm font-medium text-gray-400 mb-2">Íµ¨Îß§ ÌûàÏä§ÌÜ†Î¶¨ (MoonPay ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞)</h3>

              {purchaseHistoryLoading && (
                <div className="flex items-center gap-2 text-gray-400">
                  <div className="animate-spin w-4 h-4 border-2 border-gray-600 border-t-gray-400 rounded-full"></div>
                  <span className="text-sm">ÌûàÏä§ÌÜ†Î¶¨ Î°úÎî© Ï§ë...</span>
                </div>
              )}

              {purchaseHistoryError && (
                <div className="p-2 bg-yellow-600/20 border border-yellow-600/30 rounded-lg">
                  <div className="flex items-start gap-2">
                    <span className="text-yellow-400 mt-0.5">‚ÑπÔ∏è</span>
                    <div className="text-sm">
                      <p className="text-yellow-300 font-medium">Íµ¨Îß§ ÌûàÏä§ÌÜ†Î¶¨ ÏóÜÏùå</p>
                      <p className="text-yellow-200/80 text-xs">
                        Ï≤´ Íµ¨Îß§Î•º ÏßÑÌñâÌïòÏãúÎ©¥ ÌûàÏä§ÌÜ†Î¶¨Í∞Ä ÌëúÏãúÎê©ÎãàÎã§.
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {purchaseHistory && !purchaseHistoryLoading && !purchaseHistoryError && (
                <>
                  {purchaseHistory.length > 0 ? (
                    <div className="space-y-2">
                      {purchaseHistory.slice(0, 3).map((tx, index) => ( // ÏµúÎåÄ 3Í∞úÎßå ÌëúÏãú
                        <div key={index} className="bg-indigo-900/20 border border-indigo-700/30 rounded p-2">
                          <div className="flex justify-between items-center mb-1">
                            <span className="text-indigo-300 text-xs font-medium">
                              Ìä∏ÎûúÏû≠ÏÖò #{tx.id.slice(-8)}
                            </span>
                            <div className={`px-2 py-0.5 rounded text-xs font-medium ${
                              tx.status === 'completed' ? 'bg-green-600 text-white' :
                              tx.status === 'pending' ? 'bg-yellow-600 text-white' :
                              tx.status === 'failed' ? 'bg-red-600 text-white' : 'bg-gray-600 text-white'
                            }`}>
                              {tx.status}
                            </div>
                          </div>

                          <div className="grid grid-cols-2 gap-2 text-xs">
                            <div>
                              <div className="text-gray-400">ÌÜµÌôî</div>
                              <div className="text-white font-medium">{tx.currency}</div>
                            </div>
                            <div>
                              <div className="text-gray-400">Í∏àÏï°</div>
                              <div className="text-white font-mono">{tx.fiatAmount || tx.amount} {tx.fiatCurrency}</div>
                            </div>
                            <div>
                              <div className="text-gray-400">ÏïîÌò∏ÌôîÌèê ÏàòÎüâ</div>
                              <div className="text-green-300 font-mono">{tx.cryptoAmount || 'N/A'}</div>
                            </div>
                            <div>
                              <div className="text-gray-400">Í≤∞Ï†úÏàòÎã®</div>
                              <div className="text-blue-300">{tx.paymentMethod || 'N/A'}</div>
                            </div>
                          </div>

                          {/* ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ */}
                          <div className="mt-2 pt-2 border-t border-indigo-700/30">
                            <div className="grid grid-cols-1 gap-1 text-xs">
                              <div>
                                <span className="text-gray-400">ÏÉùÏÑ±: </span>
                                <span className="text-green-300">{new Date(tx.createdAt).toLocaleString('ko-KR')}</span>
                              </div>
                              {tx.completedAt && (
                                <div>
                                  <span className="text-gray-400">ÏôÑÎ£å: </span>
                                  <span className="text-blue-300">{new Date(tx.completedAt).toLocaleString('ko-KR')}</span>
                                </div>
                              )}
                              {tx.failedAt && (
                                <div>
                                  <span className="text-gray-400">Ïã§Ìå®: </span>
                                  <span className="text-red-300">{new Date(tx.failedAt).toLocaleString('ko-KR')}</span>
                                </div>
                              )}
                            </div>
                          </div>

                          {/* KYC Ï†ïÎ≥¥ */}
                          {(tx.kycStatus || tx.kycLevel) && (
                            <div className="mt-2 pt-2 border-t border-indigo-700/30">
                              <div className="flex gap-4 text-xs">
                                {tx.kycStatus && (
                                  <div>
                                    <span className="text-gray-400">KYC: </span>
                                    <span className="text-purple-300">{tx.kycStatus}</span>
                                  </div>
                                )}
                                {tx.kycLevel && (
                                  <div>
                                    <span className="text-gray-400">Î†àÎ≤®: </span>
                                    <span className="text-purple-300">{tx.kycLevel}</span>
                                  </div>
                                )}
                              </div>
                            </div>
                          )}

                          {/* ÏßÄÍ∞ë Ï£ºÏÜåÏôÄ Ìä∏ÎûúÏû≠ÏÖò Ìï¥Ïãú */}
                          {(tx.walletAddress || tx.txHash) && (
                            <div className="mt-2 pt-2 border-t border-indigo-700/30">
                              {tx.walletAddress && (
                                <div className="mb-1">
                                  <div className="text-gray-400 text-xs">ÏßÄÍ∞ë Ï£ºÏÜå</div>
                                  <div className="text-cyan-300 font-mono text-xs break-all">
                                    {tx.walletAddress}
                                  </div>
                                </div>
                              )}
                              {tx.txHash && (
                                <div>
                                  <div className="text-gray-400 text-xs">Ìä∏ÎûúÏû≠ÏÖò Ìï¥Ïãú</div>
                                  <div className="text-cyan-300 font-mono text-xs break-all">
                                    {tx.txHash}
                                  </div>
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                      ))}

                      {/* Îçî ÎßéÏùÄ ÌûàÏä§ÌÜ†Î¶¨Í∞Ä ÏûàÏúºÎ©¥ ÌëúÏãú */}
                      {purchaseHistory.length > 3 && (
                        <div className="text-center">
                          <button
                            onClick={() => window.location.href = '/purchase/history'}
                            className="text-xs text-gray-500 hover:text-gray-400 underline"
                          >
                            +{purchaseHistory.length - 3}Í∞ú Îçî Î≥¥Í∏∞ (ÌûàÏä§ÌÜ†Î¶¨ ÌéòÏù¥ÏßÄÏóêÏÑú)
                          </button>
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="p-2 bg-gray-600/20 border border-gray-600/30 rounded-lg">
                      <div className="flex items-start gap-2">
                        <span className="text-gray-400 mt-0.5">‚ÑπÔ∏è</span>
                        <div className="text-sm">
                          <p className="text-gray-300 font-medium">Íµ¨Îß§ ÌûàÏä§ÌÜ†Î¶¨ ÏóÜÏùå</p>
                          <p className="text-gray-400 text-xs">
                            Ï≤´ Íµ¨Îß§Î•º ÏßÑÌñâÌïòÏãúÎ©¥ ÌûàÏä§ÌÜ†Î¶¨Í∞Ä ÌëúÏãúÎê©ÎãàÎã§.
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                </>
              )}
            </div>
          </Card>
        )}

        {/* ÌîÑÎ°úÎ∞îÏù¥Îçî ÏÉÅÌÉú */}
        <Card className="bg-[#23242A] border-gray-700 mb-2">
          <div className="p-1">
            <h3 className="text-sm font-medium text-gray-400 mb-2">Í≤∞Ï†ú ÌîÑÎ°úÎ∞îÏù¥Îçî ÏÉÅÌÉú</h3>

            {providerStatusLoading && (
              <div className="flex items-center gap-2 text-gray-400">
                <div className="animate-spin w-4 h-4 border-2 border-gray-600 border-t-gray-400 rounded-full"></div>
                <span className="text-sm">ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...</span>
              </div>
            )}

            {providerStatusError && (
              <div className="p-3 bg-red-600/20 border border-red-600/30 rounded-lg">
                <div className="flex items-start gap-2">
                  <span className="text-red-400 mt-0.5">‚ùå</span>
                  <div className="text-sm">
                    <p className="text-red-300 font-medium">ÌîÑÎ°úÎ∞îÏù¥Îçî ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§</p>
                    <p className="text-red-200/80 text-sm">
                      Íµ¨Îß§ ÏÑúÎπÑÏä§Ïóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.
                    </p>
                  </div>
                </div>
              </div>
            )}

            {providerStatus && !providerStatusLoading && !providerStatusError && (
              <>
                <div className="flex gap-2 flex-wrap">
                  {Object.entries(providerStatus.providers || {}).map(([provider, status]: [string, any]) => (
                    <div key={provider} className={`px-2 py-1 rounded text-sm flex items-center gap-1 ${
                      status.available ? 'bg-green-600 text-white' : 'bg-red-600 text-white'
                    }`}>
                      <span className={`w-2 h-2 rounded-full ${
                        status.available ? 'bg-green-300' : 'bg-red-300'
                      }`}></span>
                      {provider.toUpperCase()}: {status.available ? 'ÏÇ¨Ïö©Í∞ÄÎä•' : 'ÏÇ¨Ïö©Î∂àÍ∞Ä'}
                    </div>
                  ))}
                </div>
                {/* Î™®Îì† ÌîÑÎ°úÎ∞îÏù¥ÎçîÍ∞Ä ÏÇ¨Ïö©Î∂àÍ∞ÄÏù∏ Í≤ΩÏö∞ ÏïàÎÇ¥ Î©îÏãúÏßÄ */}
                {providerStatus.providers &&
                 Object.values(providerStatus.providers).every((p: any) => !p.available) && (
                  <div className="mt-3 p-3 bg-yellow-600/20 border border-yellow-600/30 rounded-lg">
                    <div className="flex items-start gap-2">
                      <span className="text-yellow-400 mt-0.5">‚ö†Ô∏è</span>
                      <div className="text-sm">
                        <p className="text-yellow-300 font-medium">ÌòÑÏû¨ Î™®Îì† Í≤∞Ï†ú ÏÑúÎπÑÏä§Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§</p>
                        <p className="text-yellow-200/80 text-sm">
                          ÏÑúÎπÑÏä§ Ï†êÍ≤Ä Ï§ëÏù¥Í±∞ÎÇò ÏùºÏãúÏ†ÅÏù∏ Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏùÑ Ïàò ÏûàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.
                        </p>
                      </div>
                    </div>
                  </div>
                )}
              </>
            )}
          </div>
        </Card>

        {step === 'quote' && (
          <>
            {/* Íµ¨Îß§Ìï† ÏΩîÏù∏ ÏÑ†ÌÉù */}
            <Card className="bg-[#23242A] border-gray-700 mb-2">
              <div className="p-1">
                <h3 className="text-sm font-medium text-gray-400 mb-2">Íµ¨Îß§Ìï† ÏïîÌò∏ÌôîÌèê</h3>

                {currenciesLoading ? (
                  <div className="flex items-center gap-2 text-gray-400">
                    <div className="animate-spin w-4 h-4 border-2 border-gray-600 border-t-gray-400 rounded-full"></div>
                    <span className="text-sm">Í∞ÄÏÉÅÌôîÌèê Î™©Î°ù Î°úÎî© Ï§ë...</span>
                  </div>
                ) : currenciesError ? (
                  <div className="p-3 bg-red-600/20 border border-red-600/30 rounded-lg">
                    <div className="flex items-start gap-2">
                      <span className="text-red-400 mt-0.5">‚ùå</span>
                      <div className="text-sm">
                        <p className="text-red-300 font-medium">Í∞ÄÏÉÅÌôîÌèê Î™©Î°ùÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§</p>
                        <p className="text-red-200/80 text-sm">
                          ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.
                        </p>
                      </div>
                    </div>
                  </div>
                ) : currencies && Object.keys(currencies).length > 0 ? (
                  <>
                    <Select
                      options={(() => {
                        // ÏÑ†ÌÉùÎêú Î≤ïÏ†ïÌôîÌèêÏóê Îî∞Î•∏ Í∞ÄÏÉÅÏûêÏÇ∞ ÌïÑÌÑ∞ÎßÅ (Ìñ•ÌõÑ ÌôïÏû•Ïö©)
                        const filteredCurrencies = filterCryptocurrenciesByFiat(
                          Object.entries(currencies).map(([symbol, currency]) => ({
                            ...currency,
                            code: symbol,
                            symbol
                          })),
                          fiatCurrency
                        );

                        const allCurrencies = filteredCurrencies.map((currency) => {
                          // ÌôîÌèê Ïù¥Î¶Ñ Îß§Ìïë
                          const currencyNames = {
                            'BTC': 'Bitcoin',
                            'ETH': 'Ethereum',
                            'USDT': 'Tether',
                            'USDC': 'USD Coin',
                            'SOL': 'Solana',
                            'MATIC': 'Polygon',
                            'ADA': 'Cardano',
                            'DOT': 'Polkadot',
                            'LINK': 'Chainlink'
                          };

                          return {
                            value: currency.symbol,  // ÏõêÎ≥∏ symbol Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
                            label: `${currencyNames[currency.symbol.toUpperCase()] || currency.name || currency.symbol.toUpperCase()} (${currency.symbol.toUpperCase()})`,
                            icon: createCoinIcon(currency.symbol.toUpperCase()),
                            subtitle: currency.providers ? `${Object.keys(currency.providers).length}Í∞ú ÌîÑÎ°úÎ∞îÏù¥Îçî ÏßÄÏõê` : 'Í∞ÄÎä•'
                          };
                        });

                        // BTC, ETHÎ•º ÏµúÏÉÅÏúÑÎ°ú Ïù¥Îèô (ÎåÄÏÜåÎ¨∏Ïûê Íµ¨Î∂Ñ ÏóÜÏù¥ ÎπÑÍµê)
                        const priorityCurrencies = ['BTC', 'ETH'];
                        const priority = allCurrencies.filter(option =>
                          priorityCurrencies.includes(option.value.toUpperCase())
                        );
                        const others = allCurrencies.filter(option =>
                          !priorityCurrencies.includes(option.value.toUpperCase())
                        );

                        // BTC, ETH ÏàúÏÑúÎ°ú Ï†ïÎ†¨ ÌõÑ ÎÇòÎ®∏ÏßÄÎäî Í∏∞Ï°¥ ÏàúÏÑú Ïú†ÏßÄ
                        const sortedPriority = priority.sort((a, b) => {
                          const order = { 'BTC': 0, 'ETH': 1 };
                          const aKey = a.value.toUpperCase();
                          const bKey = b.value.toUpperCase();
                          return (order[aKey] || 999) - (order[bKey] || 999);
                        });

                        return [...sortedPriority, ...others];
                      })()
                      }
                      value={selectedCurrency}
                      onChange={(value) => {
                        console.log('üü¶ [User Action] Currency selected from dropdown:', value);
                        setSelectedCurrency(value);
                      }}
                      placeholder="Í∞ÄÏÉÅÌôîÌèêÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî"
                      className="w-full"
                    />
                  </>
                ) : (
                  <div className="p-3 bg-gray-600/20 border border-gray-600/30 rounded-lg">
                    <div className="flex items-start gap-2">
                      <span className="text-gray-400 mt-0.5">‚ÑπÔ∏è</span>
                      <div className="text-sm">
                        <p className="text-gray-300 font-medium">ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Í∞ÄÏÉÅÌôîÌèêÍ∞Ä ÏóÜÏäµÎãàÎã§</p>
                        <p className="text-gray-400 text-sm">
                          Í≥µÍ∏âÏûêÏóêÏÑú ÏßÄÏõêÌïòÎäî Í∞ÄÏÉÅÌôîÌèêÍ∞Ä ÏóÜÏäµÎãàÎã§.
                        </p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </Card>

            {/* Í≤∞Ï†ú ÌÜµÌôî ÏÑ†ÌÉù */}
            <Card className="bg-[#23242A] border-gray-700 mb-2">
              <div className="p-1">
                <h3 className="text-sm font-medium text-gray-400 mb-2">Í≤∞Ï†ú ÌÜµÌôî</h3>
                <Select
                  options={getSupportedFiatCurrencies().map(fiat => ({
                    value: fiat.code,
                    label: `${fiat.name} (${fiat.code})`,
                    subtitle: fiat.symbol,
                    // MoonPay Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÌëúÏãú
                    description: fiat.moonPayData ? `‚úì MoonPay ÏßÄÏõê` : 'Í∏∞Î≥∏ ÏÑ§Ï†ï'
                  }))}
                  value={fiatCurrency}
                  onChange={(value) => {
                    console.log('üü¶ [User Action] Fiat currency changed:', value);
                    setFiatCurrency(value);
                  }}
                  placeholder="Í≤∞Ï†ú ÌÜµÌôî ÏÑ†ÌÉù"
                />
              </div>
            </Card>

            {/* Íµ≠Í∞Ä ÏÑ†ÌÉù */}
            <Card className="bg-[#23242A] border-gray-700 mb-2">
              <div className="p-1">
                <h3 className="text-sm font-medium text-gray-400 mb-2">Íµ≠Í∞Ä ÏÑ†ÌÉù</h3>

                {countriesLoading ? (
                  <div className="flex items-center gap-2 text-gray-400">
                    <div className="animate-spin w-4 h-4 border-2 border-gray-600 border-t-gray-400 rounded-full"></div>
                    <span className="text-sm">Íµ≠Í∞Ä Î™©Î°ù Î°úÎî© Ï§ë...</span>
                  </div>
                ) : countriesError ? (
                  <div className="p-3 bg-red-600/20 border border-red-600/30 rounded-lg">
                    <div className="flex items-start gap-2">
                      <span className="text-red-400 mt-0.5">‚ùå</span>
                      <div className="text-sm">
                        <p className="text-red-300 font-medium">Íµ≠Í∞Ä Î™©Î°ùÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§</p>
                        <p className="text-red-200/80 text-sm">
                          ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.
                        </p>
                      </div>
                    </div>
                  </div>
                ) : countries && countries.length > 0 ? (
                  <>
                    <Select
                      options={countries.map((country: any) => ({
                        value: country.alpha2,
                        label: country.name,
                        subtitle: `${country.alpha2} ‚Ä¢ ${country.alpha3}`,
                        description: country.isAllowed
                          ? (country.isBuyAllowed ? '‚úì Íµ¨Îß§ Í∞ÄÎä•' : 'Íµ¨Îß§ Ï†úÌïú')
                          : '‚ùå ÏÇ¨Ïö© Î∂àÍ∞Ä'
                      }))}
                      value={selectedCountry}
                      onChange={(value) => {
                        console.log('üü¶ [User Action] Country selected from dropdown:', value);
                        setSelectedCountry(value);
                      }}
                      placeholder="Íµ≠Í∞ÄÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî"
                      className="w-full"
                    />
                  </>
                ) : (
                  <div className="p-3 bg-gray-600/20 border border-gray-600/30 rounded-lg">
                    <div className="flex items-start gap-2">
                      <span className="text-gray-400 mt-0.5">‚ÑπÔ∏è</span>
                      <div className="text-sm">
                        <p className="text-gray-300 font-medium">ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Íµ≠Í∞ÄÍ∞Ä ÏóÜÏäµÎãàÎã§</p>
                        <p className="text-gray-400 text-sm">
                          MoonPayÏóêÏÑú ÏßÄÏõêÌïòÎäî Íµ≠Í∞ÄÍ∞Ä ÏóÜÏäµÎãàÎã§.
                        </p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </Card>

            {/* ÏÑ†ÌÉùÎêú Íµ≠Í∞Ä ÏÉÅÏÑ∏ Ï†ïÎ≥¥ - Ïã§Ï†ú MoonPay API Îç∞Ïù¥ÌÑ∞ */}
            {selectedCountry && countries && (() => {
              const selectedCountryData = countries.find((country: any) => country.alpha2 === selectedCountry);

              if (!selectedCountryData) return null;

              return (
                <Card className="bg-[#23242A] border-gray-700 mb-2">
                  <div className="p-1">
                    <h3 className="text-sm font-medium text-gray-400 mb-2">ÏÑ†ÌÉùÎêú Íµ≠Í∞Ä Ï†ïÎ≥¥</h3>

                    {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
                    <div className="grid grid-cols-2 gap-2 text-sm mb-3">
                      <div className="bg-gray-800/30 p-2 rounded">
                        <div className="text-gray-400 text-xs">Íµ≠Í∞Ä Ïù¥Î¶Ñ</div>
                        <div className="text-white font-medium">{selectedCountryData.name}</div>
                      </div>
                      <div className="bg-gray-800/30 p-2 rounded">
                        <div className="text-gray-400 text-xs">Íµ≠Í∞Ä ÏΩîÎìú</div>
                        <div className="text-white font-medium">{selectedCountryData.alpha2} / {selectedCountryData.alpha3}</div>
                      </div>
                      <div className="bg-gray-800/30 p-2 rounded">
                        <div className="text-gray-400 text-xs">MoonPay ÏßÄÏõê</div>
                        <div className={selectedCountryData.isAllowed ? "text-green-400 font-medium" : "text-red-400 font-medium"}>
                          {selectedCountryData.isAllowed ? "‚úÖ ÏßÄÏõê" : "‚ùå ÎØ∏ÏßÄÏõê"}
                        </div>
                      </div>
                      <div className="bg-gray-800/30 p-2 rounded">
                        <div className="text-gray-400 text-xs">Íµ¨Îß§ Í∞ÄÎä•</div>
                        <div className={selectedCountryData.isBuyAllowed ? "text-green-400 font-medium" : "text-red-400 font-medium"}>
                          {selectedCountryData.isBuyAllowed ? "‚úÖ Í∞ÄÎä•" : "‚ùå Î∂àÍ∞ÄÎä•"}
                        </div>
                      </div>
                    </div>

                    {/* ÏÑúÎπÑÏä§ ÏßÄÏõê ÏÉÅÌÉú */}
                    <div className="bg-blue-900/20 border border-blue-700/30 rounded p-2 mb-3">
                      <div className="text-blue-300 text-xs font-medium mb-1">ÏÑúÎπÑÏä§ ÏßÄÏõê ÏÉÅÌÉú</div>
                      <div className="text-xs text-gray-300 space-y-1">
                        <div>‚Ä¢ Íµ¨Îß§ ÏÑúÎπÑÏä§: <span className={selectedCountryData.isBuyAllowed ? "text-green-400" : "text-red-400"}>{selectedCountryData.isBuyAllowed ? '‚úì ÏßÄÏõê' : '‚úó ÎØ∏ÏßÄÏõê'}</span></div>
                        <div>‚Ä¢ ÌåêÎß§ ÏÑúÎπÑÏä§: <span className={selectedCountryData.isSellAllowed ? "text-green-400" : "text-red-400"}>{selectedCountryData.isSellAllowed ? '‚úì ÏßÄÏõê' : '‚úó ÎØ∏ÏßÄÏõê'}</span></div>
                        <div>‚Ä¢ Ï†ÑÏ≤¥ ÌóàÏö©: <span className={selectedCountryData.isAllowed ? "text-green-400" : "text-red-400"}>{selectedCountryData.isAllowed ? '‚úì ÌóàÏö©' : '‚úó Ï†úÌïú'}</span></div>
                      </div>
                    </div>

                    {/* KYC Î∞è Ïã†ÏõêÌôïÏù∏ Î¨∏ÏÑú */}
                    {selectedCountryData.supportedDocuments && selectedCountryData.supportedDocuments.length > 0 && (
                      <div className="bg-orange-900/20 border border-orange-700/30 rounded p-2 mb-3">
                        <div className="text-orange-300 text-xs font-medium mb-1">ÏßÄÏõê Ïã†ÏõêÌôïÏù∏ Î¨∏ÏÑú</div>
                        <div className="text-xs text-gray-300">
                          <div className="grid grid-cols-1 gap-1">
                            {selectedCountryData.supportedDocuments.map((doc: any, index: number) => (
                              <div key={index} className="bg-gray-800/30 p-1 rounded">
                                <div className="text-orange-300 font-medium">{doc.name}</div>
                                {doc.description && <div className="text-gray-400 text-xs">{doc.description}</div>}
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Ï∂îÍ∞Ä Ï†úÌïúÏÇ¨Ìï≠ ÎòêÎäî ÌäπÎ≥Ñ Ï†ïÎ≥¥ */}
                    <div className="bg-purple-900/20 border border-purple-700/30 rounded p-2">
                      <div className="text-purple-300 text-xs font-medium mb-1">MoonPay Íµ≠Í∞Ä Ï†ïÎ≥¥</div>
                      <div className="text-xs text-gray-300 space-y-1">
                        <div>‚Ä¢ Íµ≠Í∞Ä ÏΩîÎìú: <span className="text-purple-300">{selectedCountryData.alpha2}</span> (ISO 3166-1 alpha-2)</div>
                        <div>‚Ä¢ ÌôïÏû• ÏΩîÎìú: <span className="text-purple-300">{selectedCountryData.alpha3}</span> (ISO 3166-1 alpha-3)</div>
                        <div>‚Ä¢ Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§: <span className="text-green-400">MoonPay /v3/countries API</span></div>
                        {selectedCountryData.supportedDocuments && (
                          <div>‚Ä¢ KYC Î¨∏ÏÑú Ï¢ÖÎ•ò: <span className="text-yellow-400">{selectedCountryData.supportedDocuments.length}Í∞ú ÏßÄÏõê</span></div>
                        )}
                      </div>
                    </div>
                  </div>
                </Card>
              );
            })()}

            {/* ÏÑ†ÌÉùÎêú Î≤ïÏ†ïÌôîÌèê ÏÜçÏÑ± Ï†ïÎ≥¥ - Ïã§Ï†ú MoonPay API Îç∞Ïù¥ÌÑ∞ */}
            {fiatCurrency && (() => {
              const supportedFiats = getSupportedFiatCurrencies();
              const selectedFiat = supportedFiats.find(f => f.code === fiatCurrency);

              if (!selectedFiat) return null;

              return (
                <Card className="bg-[#23242A] border-gray-700 mb-2">
                  <div className="p-1">
                    <h3 className="text-sm font-medium text-gray-400 mb-2">ÏÑ†ÌÉùÎêú Í≤∞Ï†ú ÌÜµÌôî Ï†ïÎ≥¥</h3>

                    {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
                    <div className="grid grid-cols-2 gap-2 text-sm mb-3">
                      <div className="bg-gray-800/30 p-2 rounded">
                        <div className="text-gray-400 text-xs">ÌÜµÌôî ÏΩîÎìú</div>
                        <div className="text-white font-medium">{fiatCurrency}</div>
                      </div>
                      <div className="bg-gray-800/30 p-2 rounded">
                        <div className="text-gray-400 text-xs">ÌÜµÌôî Ïù¥Î¶Ñ</div>
                        <div className="text-white font-medium">
                          {selectedFiat.moonPayData ? selectedFiat.moonPayData.name : selectedFiat.name}
                        </div>
                      </div>
                      <div className="bg-gray-800/30 p-2 rounded">
                        <div className="text-gray-400 text-xs">ÌÜµÌôî Í∏∞Ìò∏</div>
                        <div className="text-white font-medium">{selectedFiat.symbol}</div>
                      </div>
                      <div className="bg-gray-800/30 p-2 rounded">
                        <div className="text-gray-400 text-xs">ÏÜåÏàòÏ†ê ÏûêÎ¶øÏàò</div>
                        <div className="text-white font-medium">
                          {selectedFiat.moonPayData ? `${selectedFiat.moonPayData.precision}ÏûêÎ¶¨` : 'N/A'}
                        </div>
                      </div>
                    </div>

                    {/* MoonPay ÏãúÏä§ÌÖú Ï†ïÎ≥¥ */}
                    {selectedFiat.moonPayData && (
                      <div className="bg-blue-900/20 border border-blue-700/30 rounded p-2 mb-3">
                        <div className="text-blue-300 text-xs font-medium mb-1">MoonPay ÏãúÏä§ÌÖú Ï†ïÎ≥¥</div>
                        <div className="text-xs text-gray-300 space-y-1">
                          <div>‚Ä¢ MoonPay ID: <span className="text-blue-300 font-mono">{selectedFiat.moonPayData.id}</span></div>
                          <div>‚Ä¢ Îì±Î°ùÏùº: <span className="text-green-300">{new Date(selectedFiat.moonPayData.createdAt).toLocaleDateString('ko-KR')}</span></div>
                          <div>‚Ä¢ ÏµúÏ¢Ö ÏàòÏ†ï: <span className="text-yellow-300">{new Date(selectedFiat.moonPayData.updatedAt).toLocaleDateString('ko-KR')}</span></div>
                          <div>‚Ä¢ Îç∞Ïù¥ÌÑ∞ ÏÉÅÌÉú: <span className="text-green-400">‚úì MoonPay API ÎèôÍ∏∞ÌôîÎê®</span></div>
                        </div>
                      </div>
                    )}

                    {/* Íµ¨Îß§ ÌïúÎèÑ - Ïã§Ï†ú MoonPay API Îç∞Ïù¥ÌÑ∞ */}
                    {selectedFiat.moonPayData && (
                      <div className="bg-orange-900/20 border border-orange-700/30 rounded p-2 mb-3">
                        <div className="text-orange-300 text-xs font-medium mb-1">Íµ¨Îß§ ÌïúÎèÑ (MoonPay Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞)</div>
                        <div className="text-xs text-gray-300">
                          <div>‚Ä¢ ÏµúÏÜå: <span className="text-orange-300">{selectedFiat.symbol}{selectedFiat.moonPayData.minBuyAmount?.toLocaleString() || 'N/A'}</span></div>
                          <div>‚Ä¢ ÏµúÎåÄ: <span className="text-orange-300">{selectedFiat.symbol}{selectedFiat.moonPayData.maxBuyAmount?.toLocaleString() || 'N/A'}</span></div>
                          <div>‚Ä¢ Ï†ïÎ∞ÄÎèÑ: {selectedFiat.moonPayData.precision || 2}ÏûêÎ¶¨</div>
                          <div>‚Ä¢ ÌåêÎß§ ÏßÄÏõê: {selectedFiat.moonPayData.isSellSupported ? '‚úì' : '‚úó'}</div>
                        </div>
                      </div>
                    )}

                    {/* ÏßÄÏó≠ Ï†úÌïú - Ïã§Ï†ú MoonPay API Îç∞Ïù¥ÌÑ∞ */}
                    {selectedFiat.moonPayData && selectedFiat.moonPayData.notAllowedCountries && selectedFiat.moonPayData.notAllowedCountries.length > 0 && (
                      <div className="bg-red-900/20 border border-red-700/30 rounded p-2 mb-3">
                        <div className="text-red-300 text-xs font-medium mb-1">ÏßÄÏó≠ Ï†úÌïú (MoonPay Îç∞Ïù¥ÌÑ∞)</div>
                        <div className="text-xs text-gray-300">
                          <div>Ï†úÌïú Íµ≠Í∞Ä: {selectedFiat.moonPayData.notAllowedCountries.join(', ')}</div>
                        </div>
                      </div>
                    )}

                    {/* MoonPay API ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ Ï†ïÎ≥¥ */}
                    <div className="bg-blue-900/20 border border-blue-700/30 rounded p-2 mb-3">
                      <div className="text-blue-300 text-xs font-medium mb-1">MoonPay API ÏÑ§Ï†ï</div>
                      <div className="text-xs text-gray-300">
                        <div>‚Ä¢ baseCurrencyCode: <span className="text-blue-300">{fiatCurrency.toLowerCase()}</span></div>
                        <div>‚Ä¢ baseCurrencyAmount: ÏÇ¨Ïö©Ïûê ÏûÖÎ†• Í∏àÏï°</div>
                        <div>‚Ä¢ paymentMethod: credit_debit_card (Í∏∞Î≥∏Í∞í)</div>
                        <div>‚Ä¢ Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§: {selectedFiat.moonPayData ? 'MoonPay /v3/currencies API' : 'Í∏∞Î≥∏Í∞í'}</div>
                      </div>
                    </div>

                    {/* Ï∂îÍ∞Ä API Ï†ïÎ≥¥ */}
                    <div className="bg-purple-900/20 border border-purple-700/30 rounded p-2">
                      <div className="text-purple-300 text-xs font-medium mb-1">ÏÇ¨Ïö© Í∞ÄÎä•Ìïú MoonPay API</div>
                      <div className="text-xs text-gray-300 space-y-1">
                        <div>‚Ä¢ <span className="text-green-400">GET /v3/currencies</span> - ÏßÄÏõê ÌÜµÌôî Î™©Î°ù (ÌòÑÏû¨ ÏÇ¨Ïö© Ï§ë)</div>
                        <div>‚Ä¢ <span className="text-blue-400">GET /v3/countries</span> - ÏßÄÏõê Íµ≠Í∞Ä Î™©Î°ù</div>
                        <div>‚Ä¢ <span className="text-yellow-400">GET /v3/currencies/{fiatCurrency.toLowerCase()}/buy_quote</span> - Ïã§ÏãúÍ∞Ñ Í≤¨Ï†Å</div>
                        <div>‚Ä¢ <span className="text-purple-400">GET /v3/currencies/{fiatCurrency.toLowerCase()}/limits</span> - Íµ¨Îß§ ÌïúÎèÑ</div>
                        <div>‚Ä¢ <span className="text-cyan-400">GET /v4/ip_address</span> - ÏßÄÏó≠ Í∞êÏßÄ</div>
                        <div className="text-yellow-400 mt-2">‚ö° Î™®Îì† Îç∞Ïù¥ÌÑ∞Îäî Ïã§ÏãúÍ∞Ñ APIÏóêÏÑú Í∞ÄÏ†∏ÏòµÎãàÎã§</div>
                      </div>
                    </div>
                  </div>
                </Card>
              );
            })()}

            {/* ÏÑ†ÌÉùÎêú Í∞ÄÏÉÅÌôîÌèê ÏÜçÏÑ± Ï†ïÎ≥¥ - Ïã§Ï†ú MoonPay API Îç∞Ïù¥ÌÑ∞ */}
            {selectedCurrency && currencies && (() => {
              const cryptoCurrencyData = Object.entries(currencies).find(([symbol, currency]: [string, any]) =>
                currency.code === selectedCurrency.toLowerCase() && currency.type === 'crypto'
              );

              if (!cryptoCurrencyData) return null;

              const [symbol, cryptoData] = cryptoCurrencyData;

              return (
                <Card className="bg-[#23242A] border-gray-700 mb-2">
                  <div className="p-1">
                    <h3 className="text-sm font-medium text-gray-400 mb-2">ÏÑ†ÌÉùÎêú Í∞ÄÏÉÅÌôîÌèê Ï†ïÎ≥¥</h3>

                    {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
                    <div className="grid grid-cols-2 gap-2 text-sm mb-3">
                      <div className="bg-gray-800/30 p-2 rounded">
                        <div className="text-gray-400 text-xs">ÌÜµÌôî ÏΩîÎìú</div>
                        <div className="text-white font-medium">{selectedCurrency}</div>
                      </div>
                      <div className="bg-gray-800/30 p-2 rounded">
                        <div className="text-gray-400 text-xs">ÌÜµÌôî Ïù¥Î¶Ñ</div>
                        <div className="text-white font-medium">{cryptoData.name}</div>
                      </div>
                      <div className="bg-gray-800/30 p-2 rounded">
                        <div className="text-gray-400 text-xs">ÏÜåÏàòÏ†ê ÏûêÎ¶øÏàò</div>
                        <div className="text-white font-medium">{cryptoData.precision}ÏûêÎ¶¨</div>
                      </div>
                      <div className="bg-gray-800/30 p-2 rounded">
                        <div className="text-gray-400 text-xs">ÏÉÅÌÉú</div>
                        <div className={cryptoData.isSuspended ? "text-red-400 font-medium" : "text-green-400 font-medium"}>
                          {cryptoData.isSuspended ? "‚ùå Ï§ëÎã®Îê®" : "‚úÖ ÌôúÏÑ±"}
                        </div>
                      </div>
                    </div>

                    {/* MoonPay ÏãúÏä§ÌÖú Ï†ïÎ≥¥ */}
                    <div className="bg-blue-900/20 border border-blue-700/30 rounded p-2 mb-3">
                      <div className="text-blue-300 text-xs font-medium mb-1">MoonPay ÏãúÏä§ÌÖú Ï†ïÎ≥¥</div>
                      <div className="text-xs text-gray-300 space-y-1">
                        <div>‚Ä¢ MoonPay ID: <span className="text-blue-300 font-mono">{cryptoData.id}</span></div>
                        <div>‚Ä¢ Îì±Î°ùÏùº: <span className="text-green-300">{new Date(cryptoData.createdAt).toLocaleDateString('ko-KR')}</span></div>
                        <div>‚Ä¢ ÏµúÏ¢Ö ÏàòÏ†ï: <span className="text-yellow-300">{new Date(cryptoData.updatedAt).toLocaleDateString('ko-KR')}</span></div>
                        <div>‚Ä¢ ÌÖåÏä§Ìä∏ Î™®Îìú: <span className={cryptoData.supportsTestMode ? "text-green-400" : "text-red-400"}>{cryptoData.supportsTestMode ? '‚úì ÏßÄÏõê' : '‚úó ÎØ∏ÏßÄÏõê'}</span></div>
                      </div>
                    </div>

                    {/* Íµ¨Îß§/ÌåêÎß§ ÌïúÎèÑ */}
                    <div className="bg-orange-900/20 border border-orange-700/30 rounded p-2 mb-3">
                      <div className="text-orange-300 text-xs font-medium mb-1">Íµ¨Îß§/ÌåêÎß§ ÌïúÎèÑ (MoonPay Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞)</div>
                      <div className="text-xs text-gray-300 space-y-1">
                        <div>‚Ä¢ ÏµúÏÜå Íµ¨Îß§: <span className="text-orange-300">{cryptoData.minBuyAmount} {selectedCurrency}</span></div>
                        <div>‚Ä¢ ÏµúÎåÄ Íµ¨Îß§: <span className="text-orange-300">{cryptoData.maxBuyAmount} {selectedCurrency}</span></div>
                        {cryptoData.minSellAmount && (
                          <div>‚Ä¢ ÏµúÏÜå ÌåêÎß§: <span className="text-green-300">{cryptoData.minSellAmount} {selectedCurrency}</span></div>
                        )}
                        {cryptoData.maxSellAmount && (
                          <div>‚Ä¢ ÏµúÎåÄ ÌåêÎß§: <span className="text-green-300">{cryptoData.maxSellAmount} {selectedCurrency}</span></div>
                        )}
                        <div>‚Ä¢ ÌåêÎß§ ÏßÄÏõê: <span className={cryptoData.isSellSupported ? "text-green-400" : "text-red-400"}>{cryptoData.isSellSupported ? '‚úì ÏßÄÏõê' : '‚úó ÎØ∏ÏßÄÏõê'}</span></div>
                      </div>
                    </div>

                    {/* ÏßÄÏó≠ Ï†úÌïú Ï†ïÎ≥¥ */}
                    {(cryptoData.notAllowedCountries?.length > 0 || cryptoData.notAllowedUSStates?.length > 0) && (
                      <div className="bg-red-900/20 border border-red-700/30 rounded p-2 mb-3">
                        <div className="text-red-300 text-xs font-medium mb-1">ÏßÄÏó≠ Ï†úÌïú (MoonPay Îç∞Ïù¥ÌÑ∞)</div>
                        <div className="text-xs text-gray-300 space-y-1">
                          {cryptoData.notAllowedCountries?.length > 0 && (
                            <div>Ï†úÌïú Íµ≠Í∞Ä: <span className="text-red-300">{cryptoData.notAllowedCountries.join(', ')}</span></div>
                          )}
                          {cryptoData.notAllowedUSStates?.length > 0 && (
                            <div>Ï†úÌïú ÎØ∏Íµ≠ Ï£º: <span className="text-red-300">{cryptoData.notAllowedUSStates.join(', ')}</span></div>
                          )}
                          <div>ÎØ∏Íµ≠ ÏßÄÏõê: <span className={cryptoData.isSupportedInUs ? "text-green-400" : "text-red-400"}>{cryptoData.isSupportedInUs ? '‚úì ÏßÄÏõê' : '‚úó ÎØ∏ÏßÄÏõê'}</span></div>
                        </div>
                      </div>
                    )}

                    {/* Î∏îÎ°ùÏ≤¥Ïù∏ Í∏∞Ïà† Ï†ïÎ≥¥ */}
                    {cryptoData.metadata && (
                      <div className="bg-purple-900/20 border border-purple-700/30 rounded p-2 mb-3">
                        <div className="text-purple-300 text-xs font-medium mb-1">Î∏îÎ°ùÏ≤¥Ïù∏ Í∏∞Ïà† Ï†ïÎ≥¥</div>
                        <div className="text-xs text-gray-300 space-y-1">
                          {cryptoData.metadata.networkCode && (
                            <div>‚Ä¢ ÎÑ§Ìä∏ÏõåÌÅ¨: <span className="text-purple-300">{cryptoData.metadata.networkCode}</span></div>
                          )}
                          {cryptoData.metadata.chainId && (
                            <div>‚Ä¢ Ï≤¥Ïù∏ ID: <span className="text-purple-300">{cryptoData.metadata.chainId}</span></div>
                          )}
                          {cryptoData.metadata.contractAddress && (
                            <div>‚Ä¢ Ïª®Ìä∏ÎûôÌä∏: <span className="text-purple-300 font-mono">{cryptoData.metadata.contractAddress}</span></div>
                          )}
                          <div>‚Ä¢ Ï£ºÏÜå ÌÉúÍ∑∏ ÏßÄÏõê: <span className={cryptoData.supportsAddressTag ? "text-green-400" : "text-gray-400"}>{cryptoData.supportsAddressTag ? '‚úì ÏßÄÏõê' : '‚úó ÎØ∏ÏßÄÏõê'}</span></div>
                        </div>
                      </div>
                    )}

                    {/* Ï£ºÏÜå Í≤ÄÏ¶ù Ï†ïÎ≥¥ */}
                    {cryptoData.addressRegex && (
                      <div className="bg-green-900/20 border border-green-700/30 rounded p-2 mb-3">
                        <div className="text-green-300 text-xs font-medium mb-1">Ï£ºÏÜå Í≤ÄÏ¶ù Ï†ïÎ≥¥</div>
                        <div className="text-xs text-gray-300 space-y-1">
                          <div>‚Ä¢ Î©îÏù∏ÎÑ∑ Ï£ºÏÜå Ìå®ÌÑ¥:</div>
                          <div className="text-green-300 font-mono text-xs bg-gray-800/50 p-1 rounded">{cryptoData.addressRegex}</div>
                          {cryptoData.testnetAddressRegex && (
                            <>
                              <div>‚Ä¢ ÌÖåÏä§Ìä∏ÎÑ∑ Ï£ºÏÜå Ìå®ÌÑ¥:</div>
                              <div className="text-yellow-300 font-mono text-xs bg-gray-800/50 p-1 rounded">{cryptoData.testnetAddressRegex}</div>
                            </>
                          )}
                          {cryptoData.addressTagRegex && (
                            <>
                              <div>‚Ä¢ Ï£ºÏÜå ÌÉúÍ∑∏ Ìå®ÌÑ¥:</div>
                              <div className="text-blue-300 font-mono text-xs bg-gray-800/50 p-1 rounded">{cryptoData.addressTagRegex}</div>
                            </>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                </Card>
              );
            })()}

            {/* Íµ¨Îß§ Í∏àÏï° */}
            <Card className="bg-[#23242A] border-gray-700 mb-2">
              <div className="p-1">
                <h3 className="text-sm font-medium text-gray-400 mb-2">Íµ¨Îß§ Í∏àÏï° ({fiatCurrency})</h3>
                <Input
                  type="number"
                  value={amount}
                  onChange={(e) => {
                    console.log('üü¶ [User Action] Amount input changed:', e.target.value);
                    setAmount(e.target.value);
                  }}
                  placeholder="Íµ¨Îß§Ìï† Í∏àÏï°ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  className="w-full"
                  min="1"
                  step="1"
                />
                <div className="flex gap-2 mt-2">
                  {[50, 100, 200, 500].map(preset => (
                    <button
                      key={preset}
                      onClick={() => {
                        console.log('üü¶ [User Action] Preset amount selected:', preset);
                        setAmount(preset.toString());
                      }}
                      className="px-2 py-0.5 text-sm rounded bg-gray-700 hover:bg-gray-600 transition-colors"
                    >
                      ${preset}
                    </button>
                  ))}
                </div>
              </div>
            </Card>

            {/* ÏïîÌò∏ÌôîÌèê Î∞õÏùÑ Ï£ºÏÜå */}
            <Card className="bg-[#23242A] border-gray-700 mb-2">
              <div className="p-1">
                <h3 className="text-sm font-medium text-gray-400 mb-2">
                  {selectedCurrency ? `${selectedCurrency.toUpperCase()} Î∞õÏùÑ Ï£ºÏÜå` : 'ÏïîÌò∏ÌôîÌèê Î∞õÏùÑ Ï£ºÏÜå'}
                </h3>
                <Input
                  type="text"
                  value={getWalletAddressForCurrency(selectedCurrency) || ''}
                  onChange={(e) => {
                    // ÌïÑÏöîÏãú ÏàòÎèôÏúºÎ°ú Ï£ºÏÜå Î≥ÄÍ≤Ω Í∞ÄÎä•ÌïòÎèÑÎ°ù Ï≤òÎ¶¨
                    console.log('üü¶ [User Action] Receiving address changed:', e.target.value);
                  }}
                  placeholder={selectedCurrency ?
                    `${selectedCurrency.toUpperCase()} ÏßÄÍ∞ë Ï£ºÏÜåÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî` :
                    'Î®ºÏ†Ä Íµ¨Îß§Ìï† ÏïîÌò∏ÌôîÌèêÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî'
                  }
                  className="w-full font-mono text-sm"
                  readOnly={true} // ÏûêÎèôÏúºÎ°úÎßå ÏûÖÎ†•ÎêòÎèÑÎ°ù ÏÑ§Ï†ï
                />
                {selectedCurrency && getWalletAddressForCurrency(selectedCurrency) && (
                  <p className="text-sm text-gray-500 mt-2">
                    * ÏûêÎèô ÏûÖÎ†•Îê®
                  </p>
                )}
                {selectedCurrency && !getWalletAddressForCurrency(selectedCurrency) && (
                  <p className="text-sm text-yellow-500 mt-2">
                    ‚ö†Ô∏è Ï£ºÏÜå ÏóÜÏùå
                  </p>
                )}
              </div>
            </Card>

            {/* Í≤¨Ï†Å Ï°∞Ìöå Î≤ÑÌäº */}
            <Button
              onClick={handleGetQuotes}
              disabled={
                quotesLoading ||
                !amount ||
                parseFloat(amount) <= 0 ||
                providerStatusError ||
                providerStatusLoading ||
                (providerStatus?.providers && Object.values(providerStatus.providers).every((p: any) => !p.available))
              }
              className={`w-full font-bold mt-2 ${
                (providerStatusError ||
                 providerStatusLoading ||
                 (providerStatus?.providers && Object.values(providerStatus.providers).every((p: any) => !p.available)))
                  ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                  : 'bg-[#F2A003] hover:bg-[#F2A003]/80 text-black'
              }`}
            >
              {quotesLoading
                ? 'Í≤¨Ï†Å Ï°∞Ìöå Ï§ë...'
                : providerStatusError
                  ? 'ÏÑúÎπÑÏä§ Ïó∞Í≤∞ Ïã§Ìå®'
                  : providerStatusLoading
                    ? 'ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...'
                    : (providerStatus?.providers && Object.values(providerStatus.providers).every((p: any) => !p.available))
                      ? 'Í≤∞Ï†ú ÏÑúÎπÑÏä§ ÏÇ¨Ïö©Î∂àÍ∞Ä'
                      : 'Í≤¨Ï†Å Ï°∞Ìöå'
              }
            </Button>

            {/* Í≤¨Ï†Å Í≤∞Í≥º */}
            {quotes && (
              <Card className="bg-[#23242A] border-gray-700">
                <div className="p-1">
                  <h3 className="text-sm font-medium text-gray-400 mb-2">ÏµúÏ†Å Í≤¨Ï†Å</h3>

                  {/* Ï∂îÏ≤ú Í≤¨Ï†Å */}
                  {quotes.recommended && (
                    <div className="bg-[#F2A003]/10 border border-[#F2A003]/30 rounded-lg p-3 mb-3">
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-[#F2A003] font-bold text-sm">üèÜ Ï∂îÏ≤ú</span>
                        <span className="text-sm bg-[#F2A003] text-black px-2 py-1 rounded">
                          {quotes.recommended.providerId.toUpperCase()}
                        </span>
                      </div>
                      <div className="text-white font-bold">
                        {quotes.recommended.cryptoAmount} {selectedCurrency}
                      </div>
                      <div className="text-gray-400 text-sm space-y-1">
                        <div>Ï¥ù ÎπÑÏö©: <span className="text-white">{getFiatSymbol(fiatCurrency)}{quotes.recommended.totalCost}</span></div>
                        <div>Í∏∞Î≥∏ ÏàòÏàòÎ£å: <span className="text-orange-300">{getFiatSymbol(fiatCurrency)}{quotes.recommended.baseFee.toFixed(2)}</span></div>
                        <div>ÎÑ§Ìä∏ÏõåÌÅ¨ ÏàòÏàòÎ£å: <span className="text-blue-300">
                          {(() => {
                            const networkFee = getNetworkFee(selectedCurrency, fiatCurrency);
                            if (networkFee !== null) {
                              return `${getFiatSymbol(fiatCurrency)}${networkFee.toFixed(2)}`;
                            } else {
                              return 'Î≥ÑÎèÑ';
                            }
                          })()}
                        </span></div>
                        <div>ÌôòÏú®: 1 {selectedCurrency} = <span className="text-green-300">{getFiatSymbol(fiatCurrency)}{quotes.recommended.exchangeRate?.toFixed(2)}</span></div>
                        <div>ÏÜåÏöîÏãúÍ∞Ñ: <span className="text-purple-300">{quotes.recommended.processingTime}</span></div>
                        {quotes.recommended.additionalInfo && (
                          <div className="mt-2 p-2 bg-gray-800/40 rounded text-xs">
                            <div className="text-blue-300 font-medium mb-1">MoonPay API ÏÉÅÏÑ∏ Ï†ïÎ≥¥</div>
                            {quotes.recommended.additionalInfo.moonPayQuoteId && (
                              <div className="text-gray-500">Í≤¨Ï†ÅID: {quotes.recommended.additionalInfo.moonPayQuoteId}</div>
                            )}
                            {quotes.recommended.additionalInfo.networkFee && (
                              <div className="text-yellow-400">ÎÑ§Ìä∏ÏõåÌÅ¨ ÏàòÏàòÎ£å: {getFiatSymbol(fiatCurrency)}{quotes.recommended.additionalInfo.networkFee}</div>
                            )}
                            {quotes.recommended.additionalInfo.extraFee && (
                              <div className="text-red-400">Ï∂îÍ∞Ä ÏàòÏàòÎ£å: {getFiatSymbol(fiatCurrency)}{quotes.recommended.additionalInfo.extraFee}</div>
                            )}
                            {quotes.recommended.additionalInfo.rate && (
                              <div className="text-green-400">Ïã§ÏãúÍ∞Ñ ÌôòÏú®: {quotes.recommended.additionalInfo.rate}</div>
                            )}
                          </div>
                        )}
                      </div>
                      <Button
                        onClick={() => handleCreateTransaction(quotes.recommended.providerId)}
                        className="w-full mt-2 bg-[#F2A003] hover:bg-[#F2A003]/80 text-black font-bold"
                        disabled={createTransactionMutation.isPending}
                      >
                        Íµ¨Îß§ÌïòÍ∏∞
                      </Button>
                    </div>
                  )}

                  {/* ÎåÄÏïà Í≤¨Ï†ÅÎì§ */}
                  {quotes.alternatives && quotes.alternatives.length > 0 && (
                    <>
                      <h4 className="text-sm text-gray-400">Îã§Î•∏ ÏòµÏÖò</h4>
                      {quotes.alternatives.map((quote: any, index: number) => (
                        <div key={index} className="bg-gray-700/30 rounded-lg p-3 mb-2">
                          <div className="flex justify-between items-center mb-2">
                            <span className="text-sm bg-gray-600 text-white px-2 py-1 rounded">
                              {quote.providerId.toUpperCase()}
                            </span>
                          </div>
                          <div className="text-white font-medium">
                            {quote.cryptoAmount} {selectedCurrency}
                          </div>
                          <div className="text-gray-400 text-sm space-y-1">
                            <div>Ï¥ù ÎπÑÏö©: <span className="text-white">{getFiatSymbol(fiatCurrency)}{quote.totalCost}</span></div>
                            <div>Í∏∞Î≥∏ ÏàòÏàòÎ£å: <span className="text-orange-300">{getFiatSymbol(fiatCurrency)}{quote.baseFee.toFixed(2)}</span></div>
                            <div>ÌôòÏú®: 1 {selectedCurrency} = <span className="text-green-300">{getFiatSymbol(fiatCurrency)}{quote.exchangeRate?.toFixed(2)}</span></div>
                            <div>ÏÜåÏöîÏãúÍ∞Ñ: <span className="text-purple-300">{quote.processingTime}</span></div>
                          </div>
                          <Button
                            onClick={() => handleCreateTransaction(quote.providerId)}
                            className="w-full mt-2 bg-gray-600 hover:bg-gray-500 text-white"
                            disabled={createTransactionMutation.isPending}
                          >
                            ÏÑ†ÌÉùÌïòÍ∏∞
                          </Button>
                        </div>
                      ))}
                    </>
                  )}
                </div>
              </Card>
            )}
          </>
        )}

        {step === 'processing' && (
          <Card className="bg-[#23242A] border-gray-700">
            <div className="px-3 py-2 text-center">
              <div className="animate-spin w-5 h-5 border-4 border-[#F2A003] border-t-transparent rounded-full mx-auto"></div>
              <h3 className="text-sm font-bold text-white">Í±∞Îûò ÏÉùÏÑ± Ï§ë...</h3>
              <p className="text-gray-400">Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî.</p>
            </div>
          </Card>
        )}

        {step === 'complete' && transactionId && quotes?.recommended && (
          <Card className="bg-[#23242A] border-gray-700">
            <div className="px-3 py-2 text-center">
              <div className="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center mx-auto">
                ‚úì
              </div>
              <h3 className="text-sm font-bold text-white">Íµ¨Îß§ Ï†ïÎ≥¥</h3>

              {/* Íµ¨Îß§ Ï†ïÎ≥¥ ÏöîÏïΩ */}
              <div className="bg-gray-800/50 rounded-lg px-2 py-1 text-left">
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-400 text-sm">Í≤∞Ï†ú Í∏àÏï°</span>
                    <span className="text-white font-semibold">
                      {getFiatSymbol(fiatCurrency)}{amount} {fiatCurrency}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400 text-sm">Íµ¨Îß§ ÏïîÌò∏ÌôîÌèê</span>
                    <span className="text-white font-semibold">
                      {quotes.recommended.cryptoAmount.toFixed(6)} {selectedCurrency}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400 text-sm">ÌôòÏú®</span>
                    <span className="text-gray-300 text-sm">
                      1 {selectedCurrency} = ${quotes.recommended.exchangeRate.toFixed(2)}
                    </span>
                  </div>
                  <div className="border-t border-gray-700 pt-3 mt-3">
                    <div className="flex justify-between">
                      <span className="text-gray-400 text-sm">ÏàòÏàòÎ£å Ìè¨Ìï® Ï¥ùÏï°</span>
                      <span className="text-[#F2A003] font-bold">
                        {getFiatSymbol(fiatCurrency)}{quotes.recommended.totalCost.toFixed(2)} {fiatCurrency}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              <p className="text-gray-400 text-sm mb-6">
                MoonPay Í≤∞Ï†úÏ∞ΩÏù¥ ÏÉà Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Ïó¥Î†∏ÏäµÎãàÎã§.<br/>
                Í≤∞Ï†úÎ•º ÏôÑÎ£åÌïòÎ©¥ ÏïîÌò∏ÌôîÌèêÍ∞Ä ÏßÄÍ∞ëÏúºÎ°ú Ï†ÑÏÜ°Îê©ÎãàÎã§.
              </p>

              <div className="flex gap-2">
                <Button
                  onClick={() => window.location.href = '/purchase/history'}
                  className="flex-1 bg-gray-600 hover:bg-gray-500 text-white"
                >
                  ÌûàÏä§ÌÜ†Î¶¨ Î≥¥Í∏∞
                </Button>
                <Button
                  onClick={() => {
                    setStep('quote');
                    setTransactionId(null);
                  }}
                  className="flex-1 bg-[#F2A003] hover:bg-[#F2A003]/80 text-black font-bold"
                >
                  ÏÉà Íµ¨Îß§ÌïòÍ∏∞
                </Button>
              </div>
            </div>
          </Card>
        )}

      </div>
    </div>
  );
}