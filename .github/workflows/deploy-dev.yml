name: ECS Development Deployment

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - local

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: nest-wallet-repo
  ECS_CLUSTER: nest-wallet-dev-cluster
  ECS_SERVICE: nest-wallet-dev-service
  ECS_TASK_DEFINITION: nest-wallet-task-dev
  ENVIRONMENT: dev

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  deploy:
    needs: lint
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi
          echo "🔧 Deploying to environment: ${{ env.ENVIRONMENT }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "🔨 Building Docker image for development..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          echo "📤 Pushing images to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "✅ Image built and pushed successfully"
          echo "📍 Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download current task definition
        run: |
          echo "📥 Downloading current task definition..."
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json
          
          echo "✅ Task definition downloaded"
          echo "Current task definition family: $(cat task-definition.json | jq -r '.family')"
          echo "Current revision: $(cat task-definition.json | jq -r '.revision')"

      - name: Update task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: nest-wallet-dev-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Register new task definition
        id: register-task-def
        run: |
          echo "📝 Registering new task definition..."
          
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://${{ steps.task-def.outputs.task-definition }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "✅ Task definition registered successfully"
          echo "📍 Task Definition ARN: $TASK_DEF_ARN"
          echo "task-def-arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Deploy to ECS
        run: |
          echo "🚀 Deploying to ECS development cluster..."
          
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.register-task-def.outputs.task-def-arn }} \
            --force-new-deployment
          
          echo "✅ Deployment initiated successfully"

      - name: Wait for deployment to complete
        run: |
          echo "⏳ Waiting for deployment to complete..."
          
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
          
          echo "✅ Deployment completed successfully"

      - name: Get service status
        run: |
          echo "📊 Development service status:"
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].{ServiceName:serviceName,Status:status,DesiredCount:desiredCount,RunningCount:runningCount,PendingCount:pendingCount}' \
            --output table

      - name: Get ALB DNS name
        run: |
          echo "🌐 Development ALB DNS name:"
          aws elbv2 describe-load-balancers \
            --names nest-wallet-dev-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text

      - name: Deployment summary
        run: |
          echo "🎉 Development Deployment Summary"
          echo "================================="
          echo "🏷️ Environment: Development"
          echo "🐳 Image: ${{ steps.build-image.outputs.image }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Deployed by: ${{ github.actor }}"
          echo "⏰ Deployed at: $(date -u)"
          echo "🔗 ALB: nest-wallet-dev-alb"
          echo "📊 Cluster: ${{ env.ECS_CLUSTER }}"
          echo "🔄 Service: ${{ env.ECS_SERVICE }}" 